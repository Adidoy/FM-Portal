@{
    ViewBag.Title = "My Projects";
    ViewBag.Description = "Details";
    Layout = "~/Views/Shared/_BodyLayout.cshtml";
}

@section BreadCrumb {
    <ol class="breadcrumb float-sm-right">
        <li class="breadcrumb-item"><a href="/"><i class="fa fa-dashboard"></i>@Html.ActionLink("PUP-FM Portal", "index", "Home")</a></li>
        <li class="breadcrumb-item">@Html.ActionLink("My Projects", "dashboard", "My Projects", new { Area = "procurement" }, null)</li>
        <li class="breadcrumb-item">Details</li>
    </ol>
}

@section Header {
    <h3 class="card-title"><i class="fa fa-bookmark"></i> @Model.PAPCode - @Model.ProcurementProgram</h3>
}

@Html.AntiForgeryToken()
@Html.Partial("_Form")
<hr />
<div class="row">
    <div class="col-sm-12 text-right">
        <div class="form-group">
            <button type="button" class="btn btn-danger" onclick="window.location = '@Url.Action("dashboard", "MyProjects", new { area = "procurement" })'"><i class="fa fa-arrow-alt-circle-left"></i>&nbsp; Back to Dashboard</button>
        </div>
    </div>
</div>

<script src="~/Scripts/adminlte/components/bootstrap-datepicker/dist/js/bootstrap-datepicker.js"></script>
<script type="text/javascript">
    function OpenSubmission() {
        swal.fire({
            title: "Open Purchase Request Submission?",
            text: "You are about to open Purchase Request Submission, continue?",
            type: "warning",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                modeOfProcurement = $('#ModeOfProcurement').val();
                $.ajax({
                    url: '@Url.Action("open-pr-submission", "MyProjects", new { Area = "procurement" })',
                    type: 'POST',
                    dataType: 'JSON',
                    data: { ModeOfProcurement: modeOfProcurement, PAPCode: '@Model.PAPCode' },
                    success: function (data) {
                        if (data.result == true) {
                            swal.fire({
                                title: "Purchase Request Submission Open!",
                                text: "P/R Submission is now open.",
                                type: "success"
                            }).then((result) => {
                                window.location = '@Url.Action("details", "MyProjects", new { Area = "procurement", PAPCode = Model.PAPCode })'
                            })
                        }
                    }
                });
            }
            else {
                swal.fire({
                    title: "Cancelled!",
                    text: "You have cancelled saving the record.",
                    type: "error"
                })
            };
        })
    }

    function CloseSubmission() {
        swal.fire({
            title: "Close Purchase Request Submission?",
            text: "This means that End-Users will not be able to submit their Purchase Requests, continue?",
            type: "warning",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                $.ajax({
                    url: '@Url.Action("close-pr-submission", "MyProjects", new { Area = "procurement" })',
                    type: 'POST',
                    dataType: 'JSON',
                    success: function (data) {
                        if (data.result == true) {
                            swal.fire({
                                title: "Purchase Request Submission Closed!",
                                text: "P/R Submission is now closed.",
                                type: "success"
                            }).then((result) => {
                                window.location = '@Url.Action("details", "MyProjects", new { Area = "procurement", PAPCode = Model.PAPCode })'
                            })
                        }
                    }
                });
            }
            else {
                swal.fire({
                    title: "Cancelled!",
                    text: "You have cancelled saving the record.",
                    type: "error"
                })
            };
        })
    }

    function UpdatePreProcurementConference() {
        swal.fire({
            title: "Update this Activity?",
            text: "You are about to update Pre-Procurement Conference activity, continue?",
            type: "warning",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                $("#preprocurement").submit();
            }
            else {
                swal.fire({
                    title: "Cancelled!",
                    text: "You have cancelled saving the record.",
                    type: "error"
                })
            }
        })
    }
    function CreateResult(data) {
        if (data.noError == true && data.result == true) {
            swal.fire({
                title: "Activity Updated!",
                text: "Pre-Procurement Activity is successfully updated.",
                type: "success"
            }).then((result) => {
                if (result.value) {
                    window.location = '@Url.Action("details", "MyProjects", new { Area = "procurement", PAPCode = Model.PAPCode })'
                }
            })
        }
        else {
            swal.fire({
                title: "Record Not Saved!",
                text: "Saving record failed.",
                type: "error"
            })
            $('span[data-valmsg-for="' + data.property + '"]').text(data.result)
        }
    }

    function PostingConference() {
        swal.fire({
            title: "Update this Activity?",
            text: "You are about to update PhilGEPS activity, continue?",
            type: "warning",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                $("#postingOfIB").submit();
            }
            else {
                swal.fire({
                    title: "Cancelled!",
                    text: "You have cancelled saving the record.",
                    type: "error"
                })
            }
        })
    }
    function PostingResult(data) {
        if (data.noError == true && data.result == true) {
            swal.fire({
                title: "Activity Updated!",
                text: "PhilGEPS Posting Activity is successfully updated.",
                type: "success"
            }).then((result) => {
                if (result.value) {
                    window.location = '@Url.Action("details", "MyProjects", new { Area = "procurement", PAPCode = Model.PAPCode })'
                }
            })
        }
        else {
            swal.fire({
                title: "Record Not Saved!",
                text: "Saving record failed.",
                type: "error"
            })
            $('span[data-valmsg-for="' + data.property + '"]').text(data.result)
        }
    }

    function UpdatePreBid() {
        swal.fire({
            title: "Update this Activity?",
            text: "You are about to update Pre-Bid Conference activity, continue?",
            type: "warning",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                $("#prebid").submit();
            }
            else {
                swal.fire({
                    title: "Cancelled!",
                    text: "You have cancelled saving the record.",
                    type: "error"
                })
            }
        })
    }
    function PreBidResult(data) {
        if (data.noError == true && data.result == true) {
            swal.fire({
                title: "Activity Updated!",
                text: "Pre-Bid Conference Activity is successfully updated.",
                type: "success"
            }).then((result) => {
                if (result.value) {
                    window.location = '@Url.Action("details", "MyProjects", new { Area = "procurement", PAPCode = Model.PAPCode })'
                }
            })
        }
        else {
            swal.fire({
                title: "Record Not Saved!",
                text: "Saving record failed.",
                type: "error"
            })
            $('span[data-valmsg-for="' + data.property + '"]').text(data.result)
        }
    }

    function UpdateBidsEvaluation() {
        swal.fire({
            title: "Update this Activity?",
            text: "You are about to update Bids Evaluation activity, continue?",
            type: "warning",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                $("#bidsevaluation").submit();
            }
            else {
                swal.fire({
                    title: "Cancelled!",
                    text: "You have cancelled saving the record.",
                    type: "error"
                })
            }
        })
    }
    function BidsEvaluationResult(data) {
        if (data.noError == true && data.result == true) {
            swal.fire({
                title: "Activity Updated!",
                text: "BidsEvaluation Activity is successfully updated.",
                type: "success"
            }).then((result) => {
                if (result.value) {
                    window.location = '@Url.Action("details", "MyProjects", new { Area = "procurement", PAPCode = Model.PAPCode })'
                }
            })
        }
        else {
            swal.fire({
                title: "Record Not Saved!",
                text: "Saving record failed.",
                type: "error"
            })
            $('span[data-valmsg-for="' + data.property + '"]').text(data.result)
        }
    }

    function UpdatePostQualification() {
        swal.fire({
            title: "Update this Activity?",
            text: "You are about to update Post Qualification activity, continue?",
            type: "warning",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                $("#postqualification").submit();
            }
            else {
                swal.fire({
                    title: "Cancelled!",
                    text: "You have cancelled saving the record.",
                    type: "error"
                })
            }
        })
    }
    function PostQualificationResult(data) {
        if (data.noError == true && data.result == true) {
            swal.fire({
                title: "Activity Updated!",
                text: "Post Qualification Activity is successfully updated.",
                type: "success"
            }).then((result) => {
                if (result.value) {
                    window.location = '@Url.Action("details", "MyProjects", new { Area = "procurement", PAPCode = Model.PAPCode })'
                }
            })
        }
        else {
            swal.fire({
                title: "Record Not Saved!",
                text: "Saving record failed.",
                type: "error"
            })
            $('span[data-valmsg-for="' + data.property + '"]').text(data.result)
        }
    }

    function UpdateNoticeOfAward() {
        swal.fire({
            title: "Update this Activity?",
            text: "You are about to update Notice of Award activity, continue?",
            type: "warning",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                $("#noticeofaward").submit();
            }
            else {
                swal.fire({
                    title: "Cancelled!",
                    text: "You have cancelled saving the record.",
                    type: "error"
                })
            }
        })
    }
    function NoticeOfAwardResult(data) {
        if (data.noError == true && data.result == true) {
            swal.fire({
                title: "Activity Updated!",
                text: "Notice of Award Activity is successfully updated.",
                type: "success"
            }).then((result) => {
                if (result.value) {
                    window.location = '@Url.Action("details", "MyProjects", new { Area = "procurement", PAPCode = Model.PAPCode })'
                }
            })
        }
        else {
            swal.fire({
                title: "Record Not Saved!",
                text: "Saving record failed.",
                type: "error"
            })
            $('span[data-valmsg-for="' + data.property + '"]').text(data.result)
        }
    }

    function UpdateContractDetails() {
        swal.fire({
            title: "Update this Activity?",
            text: "You are about to update the Contract Details, continue?",
            type: "warning",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                $("#contractdetails").submit();
            }
            else {
                swal.fire({
                    title: "Cancelled!",
                    text: "You have cancelled saving the record.",
                    type: "error"
                })
            }
        })
    }
    function ContractDetailsResult(data) {
        if (data.noError == true && data.result == true) {
            swal.fire({
                title: "Activity Updated!",
                text: "Contract Details successfully updated.",
                type: "success"
            }).then((result) => {
                if (result.value) {
                    window.location = '@Url.Action("details", "MyProjects", new { Area = "procurement", PAPCode = Model.PAPCode })'
                }
            })
        }
        else {
            swal.fire({
                title: "Record Not Saved!",
                text: "Saving record failed.",
                type: "error"
            })
            $('span[data-valmsg-for="' + data.property + '"]').text(data.result)
        }
    }

    function UpdateNOAIssuance() {
        swal.fire({
            title: "Update this Activity?",
            text: "You are about to update Notice of Award activity, continue?",
            type: "warning",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                $("#noaissuance").submit();
            }
            else {
                swal.fire({
                    title: "Cancelled!",
                    text: "You have cancelled saving the record.",
                    type: "error"
                })
            }
        })
    }
    function NOAIssuanceResult(data) {
        if (data.noError == true && data.result == true) {
            swal.fire({
                title: "Activity Updated!",
                text: "Notice of Award Activity is successfully updated.",
                type: "success"
            }).then((result) => {
                if (result.value) {
                    window.location = '@Url.Action("details", "MyProjects", new { Area = "procurement", PAPCode = Model.PAPCode })'
                }
            })
        }
        else {
            swal.fire({
                title: "Record Not Saved!",
                text: "Saving record failed.",
                type: "error"
            })
            $('span[data-valmsg-for="' + data.property + '"]').text(data.result)
        }
    }

</script>
<script type="text/javascript">
    $(function () {
        $("#POCreatedAt").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.PMOReceived == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.PMOReceived).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#ActualPreProcurementConference").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.PurchaseRequestClosing == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.PurchaseRequestClosing).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#ActualPostingOfIB").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.ActualPreProcurementConference == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.ActualPreProcurementConference).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#ActualPreBidConference").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.ActualPostingOfIB == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.ActualPostingOfIB).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#PrelimenryExamination").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.ActualPreBidConference == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.ActualPreBidConference).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#DetailedExamination").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.ActualPreBidConference == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.ActualPreBidConference).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#EvaluationReporting").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.ActualPreBidConference == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.ActualPreBidConference).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#ActualPostQualification").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.EvaluationReporting == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.EvaluationReporting).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#PostQualificationReportedToBAC").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.EvaluationReporting == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.EvaluationReporting).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#NOAIssuance").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.PostQualificationReportedToBAC == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.PostQualificationReportedToBAC).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#BACResolutionCreated").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.PostQualificationReportedToBAC == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.PostQualificationReportedToBAC).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#BACMemberForwarded").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.PostQualificationReportedToBAC == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.PostQualificationReportedToBAC).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#HOPEForwarded").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.PostQualificationReportedToBAC == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.PostQualificationReportedToBAC).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#PMOReceived").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.PostQualificationReportedToBAC == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.PostQualificationReportedToBAC).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#ActualNOAIssuance").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.POCreatedAt == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.POCreatedAt).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#NOASignedByHOPE").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.ActualNOAIssuance == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.ActualNOAIssuance).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })

    $(function () {
        $("#NOAReceivedBySupplier").datepicker({
            changeYear: true,
            changeMonth: true,
            format: "MM dd, yyyy",
            startDate: new Date('@( Model.ActualNOAIssuance == null ? DateTime.Now.ToString("MM/dd/yyyy") : ((DateTime)Model.ActualNOAIssuance).ToString("MM/dd/yyyy"))'),
            autoclose: true
        });
    })
</script>