@model PUPFMIS.Models.ProcurementProjectsVM


<div class="row">
    <div class="col-sm-12">
        <div class="bg-info">
            <h6 class="p-2">Procurement Project Details</h6>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.PAPCode, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-id-card"></i></span>
                        </div>
                        @Html.EditorFor(model => model.PAPCode, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.PAPCode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProcurementProgram, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-bookmark"></i></span>
                        </div>
                        @Html.EditorFor(model => model.ProcurementProgram, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ProcurementProgram, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ObjectClassification, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-book-open"></i></span>
                        </div>
                        @Html.EditorFor(model => model.ObjectClassification, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ObjectClassification, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.FundSource, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-book-dead"></i></span>
                        </div>
                        @Html.EditorFor(model => model.FundSource, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ProcurementProgram, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.StartMonth, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                        </div>
                        @Html.EditorFor(model => model.StartMonth, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.StartMonth, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.EndMonth, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                        </div>
                        @Html.EditorFor(model => model.EndMonth, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.EndMonth, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.APPModeOfProcurement, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-list"></i></span>
                        </div>
                        @Html.EditorFor(model => model.APPModeOfProcurement, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", rows = 4 } })
                    </div>
                    @Html.ValidationMessageFor(model => model.APPModeOfProcurement, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-paragraph"></i></span>
                        </div>
                        @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", rows = 4 } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.EndUser, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                        </div>
                        @Html.EditorFor(model => model.EndUser, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.EndUser, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.MOOETotal, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-coins"></i></span>
                        </div>
                        @Html.EditorFor(model => model.MOOETotal, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "text-align: right;", Value = Model.MOOETotal.ToString("C", new System.Globalization.CultureInfo("en-ph")), disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.MOOETotal, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.CapitalOutlayTotal, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-coins"></i></span>
                        </div>
                        @Html.EditorFor(model => model.CapitalOutlayTotal, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "text-align: right;", Value = Model.CapitalOutlayTotal.ToString("C", new System.Globalization.CultureInfo("en-ph")), disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.CapitalOutlayTotal, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.TotalEstimatedBudget, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-money-bill"></i></span>
                        </div>
                        @Html.EditorFor(model => model.TotalEstimatedBudget, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "text-align: right;", Value = Model.TotalEstimatedBudget.ToString("C", new System.Globalization.CultureInfo("en-ph")), disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.TotalEstimatedBudget, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProjectCoordinator, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-user"></i></span>
                        </div>
                        @Html.EditorFor(model => model.ProjectCoordinator, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ProjectCoordinator, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProjectSupport, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-user-alt"></i></span>
                        </div>
                        @Html.EditorFor(model => model.ProjectSupport, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ProjectSupport, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
</div>
<hr />
<div class="card card-info">
    <div class="card-header">
        <span style="font-size: 14pt;"><b>Purchase Requests</b></span>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-lg-4 col-md-4 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(d => d.ModeOfProcurement, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                        </div>
                        @if (Model.PurchaseRequestSubmission == null)
                        {
                            @Html.DropDownList("ModeOfProcurement", null, htmlAttributes: new { @class = "form-control form-control-sm", style = "font-size: 100%" })
                        }
                        else
                        {
                            @Html.DropDownList("ModeOfProcurement", null, htmlAttributes: new { @class = "form-control form-control-sm", style = "font-size: 100%", disabled = "disabled" })
                        }
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(d => d.PurchaseRequestSubmission, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                        </div>
                        @if (Model.PurchaseRequestSubmission == null)
                        {
                            @Html.EditorFor(model => model.PurchaseRequestSubmission, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = "Submission Not Yet Started" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.PurchaseRequestSubmission, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = Model.PurchaseRequestSubmission.Value.ToString("dd MMMM yyyy") } })
                        }
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(d => d.PurchaseRequestClosing, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                        </div>
                        @if (Model.PurchaseRequestClosing == null)
                        {
                            @Html.EditorFor(model => model.PurchaseRequestClosing, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = (Model.PurchaseRequestSubmission != null && Model.PurchaseRequestClosing == null) ? "Submission On-going" : "Submission Closed" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.PurchaseRequestClosing, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = Model.PurchaseRequestSubmission.Value.ToString("dd MMMM yyyy") } })
                        }
                    </div>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-sm-12">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th style="text-align:center; vertical-align:middle;" width="35%">End-User</th>
                            <th style="text-align:center; vertical-align:middle;" width="20%">P/R Number</th>
                            <th style="text-align:center; vertical-align:middle;" width="15%">Date Received</th>
                            <th style="text-align:center; vertical-align:middle;" width="25%">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                            <tr>
                                <td style="text-align:left; vertical-align:middle;">@Html.DisplayFor(d => item.EndUser)</td>
                                <td style="text-align:center; vertical-align:middle;">
                                    @if (item.PRNumber == null)
                                    {
                                        <i>P/R Not Yet Submitted</i>
                                    }
                                    else
                                    {
                                        @Html.DisplayFor(d => item.PRNumber)
                                    }
                                </td>
                                <td style="text-align:center; vertical-align:middle;">@( item.DatePRReceived == null ? "Receipt Pending" : ((DateTime)item.DatePRReceived).ToString("dd MMMM yyyy") )</td>
                                <td style="text-align:center; vertical-align:middle;">
                                    @if (item.Status == "P/R Submission Open")
                                    {
                                        <i>Awaiting for submission</i>
                                    }
                                    else if (item.PRNumber != null)
                                    {
                                        <a class="btn btn-sm btn-primary" href="@Url.Action("print", "ProcurementPurchaseRequests", new { Area = "procurement", PRNumber = item.PRNumber })" target="_blank"><i class="fa fa-print"></i> Print Purchase Request</a>
                                    }
                                    else
                                    {
                                        <i>Submission Not Open</i>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>
    @if (Model.ProjectStatus == "Project Assigned")
    {
        <div class="card-footer">
            <div class="row">
                <div class="col-sm-12">
                    <div style="text-align:right;">
                        <button class="btn btn-md btn-primary" onclick='OpenSubmission()'><i class="fa fa-lock-open"></i> Open P/R Submission</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (Model.ProjectStatus == "P/R Submission Open")
    {
        <div class="card-footer">
            <div class="row">
                <div class="col-sm-12">
                    <div style="text-align:right;">
                        <button class="btn btn-md btn-danger" onclick="CloseSubmission()"><i class="fa fa-lock"></i> Close P/R Submission</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<br />

@if (Model.PurchaseRequestClosing != null && Model.ActualPreProcurementConference == null)
{
    <div class="card card-info">
        <div class="card-header">
            <span style="font-size: 14pt;"><b>Pre-Procurement Conference</b></span>
        </div>
        <div class="card-body">
            @using (Ajax.BeginForm("update-preprocurement", "MyProjects", new { Area = "procurement" }, new AjaxOptions() { HttpMethod = "POST", OnSuccess = "CreateResult" }, htmlAttributes: new { id = "preprocurement" }))
            {
                @Html.HiddenFor(d => d.PAPCode)
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(d => d.ActualPreProcurementConference, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                </div>
                                @if (Model.ActualPreProcurementConference == null)
                                {
                                    @Html.EditorFor(model => model.ActualPreProcurementConference, new { htmlAttributes = new { @class = "form-control form-control-sm"  } })
                                }
                                else
                                {
                                    @Html.HiddenFor(d => d.ActualPreProcurementConference)
                                    @Html.EditorFor(model => model.ActualPreProcurementConference, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.ActualPreProcurementConference).ToString("dd MMMM yyyy") } })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.ActualPreProcurementConference, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        @Html.LabelFor(d => d.PreProcurementConferenceRemarks, htmlAttributes: new { @class = "control-label" })
                        @if (Model.ActualPreProcurementConference == null)
                        {
                            @Html.EditorFor(model => model.PreProcurementConferenceRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        }
                        else
                        {
                            @Html.HiddenFor(d => d.PreProcurementConferenceRemarks)
                            @Html.EditorFor(model => model.PreProcurementConferenceRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = Model.PreProcurementConference } })
                        }
                        @Html.ValidationMessageFor(model => model.PreProcurementConferenceRemarks, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
        </div>
        @if (Model.ActualPreProcurementConference == null)
        {
            <div class="card-footer">
                <div class="row">
                    <div class="col-sm-12">
                        <div style="text-align:right;">
                            <button class="btn btn-md btn-primary" onclick='UpdatePreProcurementConference()' id="btn-update"><i class="fa fa-edit"></i> Update this Activity</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <br />
}

@if(Model.ActualPreProcurementConference != null && Model.ActualPostingOfIB == null)
{
    <div class="card card-info">
        <div class="card-header">
            <span style="font-size: 14pt;"><b>PhilGEPS Posting</b></span>
        </div>
        <div class="card-body">
            @using (Ajax.BeginForm("update-postingOfIB", "MyProjects", new { Area = "procurement" }, new AjaxOptions() { HttpMethod = "POST", OnSuccess = "PostingResult" }, htmlAttributes: new { id = "postingOfIB" }))
            {
                @Html.HiddenFor(d => d.PAPCode)
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(d => d.ActualPostingOfIB, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                </div>
                                @if (Model.ActualPostingOfIB == null)
                                {
                                    @Html.EditorFor(model => model.ActualPostingOfIB, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                }
                                else
                                {
                                    @Html.HiddenFor(d => d.ActualPostingOfIB)
                                    @Html.EditorFor(model => model.ActualPostingOfIB, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.ActualPostingOfIB).ToString("dd MMMM yyyy") } })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.ActualPostingOfIB, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        @Html.LabelFor(d => d.PostingOfIBRemarks, htmlAttributes: new { @class = "control-label" })
                        @if (Model.ActualPostingOfIB == null)
                        {
                            @Html.EditorFor(model => model.PostingOfIBRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        }
                        else
                        {
                            @Html.HiddenFor(d => d.PostingOfIBRemarks)
                            @Html.EditorFor(model => model.PostingOfIBRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = Model.PostingOfIBRemarks } })
                        }
                        @Html.ValidationMessageFor(model => model.PostingOfIBRemarks, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
        </div>
        @if (Model.ActualPostingOfIB == null)
        {
            <div class="card-footer">
                <div class="row">
                    <div class="col-sm-12">
                        <div style="text-align:right;">
                            <button class="btn btn-md btn-primary" onclick='PostingConference()' id="btn-update"><i class="fa fa-edit"></i> Update this Activity</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <br />
}

@if (Model.ActualPostingOfIB != null && Model.ActualPreBidConference == null)
{
    <div class="card card-info">
        <div class="card-header">
            <span style="font-size: 14pt;"><b>Pre-Bid Conference</b></span>
        </div>
        <div class="card-body">
            @using (Ajax.BeginForm("update-prebid-conference", "MyProjects", new { Area = "procurement" }, new AjaxOptions() { HttpMethod = "POST", OnSuccess = "PreBidResult" }, htmlAttributes: new { id = "prebid" }))
            {
                @Html.HiddenFor(d => d.PAPCode)
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(d => d.ActualPreBidConference, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                </div>
                                @if (Model.ActualPreBidConference == null)
                                {
                                    @Html.EditorFor(model => model.ActualPreBidConference, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                }
                                else
                                {
                                    @Html.HiddenFor(d => d.ActualPreBidConference)
                                    @Html.EditorFor(model => model.ActualPreBidConference, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.ActualPreBidConference).ToString("dd MMMM yyyy") } })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.ActualPreBidConference, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        @Html.LabelFor(d => d.PreBidConferenceRemarks, htmlAttributes: new { @class = "control-label" })
                        @if (Model.ActualPreBidConference == null)
                        {
                            @Html.EditorFor(model => model.PreBidConferenceRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        }
                        else
                        {
                            @Html.HiddenFor(d => d.PreBidConferenceRemarks)
                            @Html.EditorFor(model => model.PreBidConferenceRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = Model.PreBidConferenceRemarks } })
                        }
                        @Html.ValidationMessageFor(model => model.PreBidConferenceRemarks, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
        </div>
        @if (Model.ActualPreBidConference == null)
        {
            <div class="card-footer">
                <div class="row">
                    <div class="col-sm-12">
                        <div style="text-align:right;">
                            <button class="btn btn-md btn-primary" onclick='UpdatePreBid()' id="btn-update"><i class="fa fa-edit"></i> Update this Activity</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <br />
}

@if (Model.ActualPreBidConference != null && (Model.PrelimenryExamination == null && Model.DetailedExamination == null))
{
    <div class="card card-info">
        <div class="card-header">
            <span style="font-size: 14pt;"><b>Evaluation of Bids</b></span>
        </div>
        <div class="card-body">
            @using (Ajax.BeginForm("update-evaluation-of-bids", "MyProjects", new { Area = "procurement" }, new AjaxOptions() { HttpMethod = "POST", OnSuccess = "BidsEvaluationResult" }, htmlAttributes: new { id = "bidsevaluation" }))
            {
                @Html.HiddenFor(d => d.PAPCode)
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(d => d.PrelimenryExamination, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                </div>
                                @if (Model.PrelimenryExamination == null && Model.DetailedExamination == null)
                                {
                                    @Html.EditorFor(model => model.PrelimenryExamination, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                }
                                else
                                {
                                    @Html.HiddenFor(d => d.PrelimenryExamination)
                                    @Html.EditorFor(model => model.PrelimenryExamination, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.PrelimenryExamination).ToString("dd MMMM yyyy") } })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.ActualPreBidConference, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(d => d.DetailedExamination, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                </div>
                                @if (Model.PrelimenryExamination == null && Model.DetailedExamination == null)
                                {
                                    @Html.EditorFor(model => model.DetailedExamination, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                }
                                else
                                {
                                    @Html.HiddenFor(d => d.DetailedExamination)
                                    @Html.EditorFor(model => model.DetailedExamination, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.DetailedExamination).ToString("dd MMMM yyyy") } })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.DetailedExamination, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(d => d.EvaluationReporting, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                </div>
                                @if (Model.PrelimenryExamination == null && Model.DetailedExamination == null)
                                {
                                    @Html.EditorFor(model => model.EvaluationReporting, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                }
                                else
                                {
                                    @Html.HiddenFor(d => d.EvaluationReporting)
                                    @Html.EditorFor(model => model.EvaluationReporting, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.EvaluationReporting).ToString("dd MMMM yyyy") } })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.EvaluationReporting, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        @Html.LabelFor(d => d.BidsExaminationRemarks, htmlAttributes: new { @class = "control-label" })
                        @if (Model.PrelimenryExamination == null && Model.DetailedExamination == null)
                        {
                            @Html.EditorFor(model => model.BidsExaminationRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        }
                        else
                        {
                            @Html.HiddenFor(d => d.BidsExaminationRemarks)
                            @Html.EditorFor(model => model.BidsExaminationRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = Model.PreBidConferenceRemarks } })
                        }
                        @Html.ValidationMessageFor(model => model.BidsExaminationRemarks, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
        </div>
        @if (Model.PrelimenryExamination == null && Model.DetailedExamination == null)
        {
            <div class="card-footer">
                <div class="row">
                    <div class="col-sm-12">
                        <div style="text-align:right;">
                            <button class="btn btn-md btn-primary" onclick='UpdateBidsEvaluation()' id="btn-update"><i class="fa fa-edit"></i> Update this Activity</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <br />
}

@if ((Model.PrelimenryExamination != null && Model.DetailedExamination != null) && Model.ActualPostQualification == null)
{
    <div class="card card-info">
        <div class="card-header">
            <span style="font-size: 14pt;"><b>Post Qualification</b></span>
        </div>
        <div class="card-body">
            @using (Ajax.BeginForm("update-post-qualification", "MyProjects", new { Area = "procurement" }, new AjaxOptions() { HttpMethod = "POST", OnSuccess = "PostQualificationResult" }, htmlAttributes: new { id = "postqualification" }))
            {
                @Html.HiddenFor(d => d.PAPCode)
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(d => d.ActualPostQualification, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                </div>
                                @if (Model.ActualPostQualification == null)
                                {
                                    @Html.EditorFor(model => model.ActualPostQualification, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                }
                                else
                                {
                                    @Html.HiddenFor(d => d.ActualPostQualification)
                                    @Html.EditorFor(model => model.ActualPostQualification, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.ActualPostQualification).ToString("dd MMMM yyyy") } })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.ActualPostQualification, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                        </div>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(d => d.PostQualificationReportedToBAC, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                </div>
                                @if (Model.ActualPostQualification == null)
                                {
                                    @Html.EditorFor(model => model.PostQualificationReportedToBAC, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                }
                                else
                                {
                                    @Html.HiddenFor(d => d.PostQualificationReportedToBAC)
                                    @Html.EditorFor(model => model.PostQualificationReportedToBAC, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.PostQualificationReportedToBAC).ToString("dd MMMM yyyy") } })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.PostQualificationReportedToBAC, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        @Html.LabelFor(d => d.PostQualificationRemarks, htmlAttributes: new { @class = "control-label" })
                        @if (Model.ActualPostQualification == null)
                        {
                            @Html.EditorFor(model => model.PostQualificationRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        }
                        else
                        {
                            @Html.HiddenFor(d => d.PostQualificationRemarks)
                            @Html.EditorFor(model => model.PostQualificationRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = Model.PostQualificationRemarks } })
                        }
                        @Html.ValidationMessageFor(model => model.PostQualificationRemarks, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
        </div>
        @if (Model.ActualPostQualification == null)
        {
            <div class="card-footer">
                <div class="row">
                    <div class="col-sm-12">
                        <div style="text-align:right;">
                            <button class="btn btn-md btn-primary" onclick='UpdatePostQualification()' id="btn-update"><i class="fa fa-edit"></i> Update this Activity</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <br />
}

@if (Model.ActualPostQualification != null)
{
    <div class="card card-info">
        <div class="card-header">
            <span style="font-size: 14pt;"><b>Notice of Award</b></span>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-sm-12">
                    <div class="card card-secondary">
                        <div class="card-header">
                            <span style="font-size:14pt;"><b>BAC RESOLUTION RECOMMENDING TO AWARD</b></span>
                        </div>
                        <div class="card-body">
                            @using (Ajax.BeginForm("update-notice-of-award", "MyProjects", new { Area = "procurement" }, new AjaxOptions() { HttpMethod = "POST", OnSuccess = "NoticeOfAwardResult" }, htmlAttributes: new { id = "noticeofaward" }))
                            {
                                @Html.HiddenFor(d => d.PAPCode)
                                <div class="row">
                                    <div class="col-lg-3 col-md-3 col-sm-12">
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.BACResolutionCreated, htmlAttributes: new { @class = "control-label" })
                                            <div class="input-group mb-3">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                                </div>
                                                @if (Model.PMOReceived == null)
                                                {
                                                    @Html.EditorFor(model => model.BACResolutionCreated, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                                }
                                                else
                                                {
                                                    @Html.HiddenFor(d => d.BACResolutionCreated)
                                                    @Html.EditorFor(model => model.BACResolutionCreated, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.BACResolutionCreated).ToString("dd MMMM yyyy") } })
                                                }
                                            </div>
                                            @Html.ValidationMessageFor(model => model.BACResolutionCreated, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-12">
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.BACMemberForwarded, htmlAttributes: new { @class = "control-label" })
                                            <div class="input-group mb-3">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                                </div>
                                                @if (Model.PMOReceived == null)
                                                {
                                                    @Html.EditorFor(model => model.BACMemberForwarded, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                                }
                                                else
                                                {
                                                    @Html.HiddenFor(d => d.BACMemberForwarded)
                                                    @Html.EditorFor(model => model.BACMemberForwarded, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.BACMemberForwarded).ToString("dd MMMM yyyy") } })
                                                }
                                            </div>
                                            @Html.ValidationMessageFor(model => model.BACMemberForwarded, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-12">
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.HOPEForwarded, htmlAttributes: new { @class = "control-label" })
                                            <div class="input-group mb-3">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                                </div>
                                                @if (Model.PMOReceived == null)
                                                {
                                                    @Html.EditorFor(model => model.HOPEForwarded, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                                }
                                                else
                                                {
                                                    @Html.HiddenFor(d => d.HOPEForwarded)
                                                    @Html.EditorFor(model => model.HOPEForwarded, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.HOPEForwarded).ToString("dd MMMM yyyy") } })
                                                }
                                            </div>
                                            @Html.ValidationMessageFor(model => model.HOPEForwarded, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-12">
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.PMOReceived, htmlAttributes: new { @class = "control-label" })
                                            <div class="input-group mb-3">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                                </div>
                                                @if (Model.PMOReceived == null)
                                                {
                                                    @Html.EditorFor(model => model.PMOReceived, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                                }
                                                else
                                                {
                                                    @Html.HiddenFor(d => d.PMOReceived)
                                                    @Html.EditorFor(model => model.PMOReceived, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.PMOReceived).ToString("dd MMMM yyyy") } })
                                                }
                                            </div>
                                            @Html.ValidationMessageFor(model => model.PMOReceived, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        @if (Model.PMOReceived == null)
                        {
                            <div class="card-footer">
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div style="text-align:right;">
                                            <button class="btn btn-md btn-primary" onclick='UpdateNoticeOfAward()' id="btn-update"><i class="fa fa-edit"></i> Update this Activity</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-sm-12">
                    <div class="card card-secondary">
                        <div class="card-header">
                            <span style="font-size:14pt;"><b>CONTRACT DETAILS</b></span>
                        </div>
                        <div class="card-body">
                            @using (Ajax.BeginForm("update-contract-details", "MyProjects", new { Area = "procurement" }, new AjaxOptions() { HttpMethod = "POST", OnSuccess = "ContractDetailsResult" }, htmlAttributes: new { id = "contractdetails" }))
                            {
                                @Html.HiddenFor(d => d.IsTangible)
                                <div class="row">
                                    <div class="col-lg-4 col-md-4 col-sm-12">
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.PONumber, htmlAttributes: new { @class = "control-label" })
                                            <div class="input-group mb-3">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fa fa-file-invoice"></i></span>
                                                </div>
                                                @Html.EditorFor(model => model.PONumber, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = Model.PONumber == null ? "No Purchase Order Yet" : Model.PONumber } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.PONumber, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-12">
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.ProjectCost, htmlAttributes: new { @class = "control-label" })
                                            <div class="input-group mb-3">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fa fa-money-bill"></i></span>
                                                </div>
                                                @Html.EditorFor(model => model.ProjectCost, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "text-align:right;", disabled = "disabled", Value = Model.ProjectCost.ToString("C", new System.Globalization.CultureInfo("en-ph")) } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.ProjectCost, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-12">
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.POCreatedAt, htmlAttributes: new { @class = "control-label" })
                                            <div class="input-group mb-3">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                                </div>
                                                @if (Model.PMOReceived == null)
                                                {
                                                    @Html.EditorFor(model => model.POCreatedAt, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = "No Purchase Order Yet" } })
                                                }
                                                else
                                                {
                                                    if (Model.POCreatedAt == null)
                                                    {
                                                        @Html.EditorFor(model => model.POCreatedAt, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                                    }
                                                    else
                                                    {
                                                        @Html.EditorFor(model => model.POCreatedAt, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = Model.POCreatedAt.Value.ToString("dd MMMM yyyy") } })
                                                    }
                                                }
                                            </div>
                                            @Html.ValidationMessageFor(model => model.POCreatedAt, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-4 col-md-4 col-sm-12">
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.Supplier, htmlAttributes: new { @class = "control-label" })
                                            <div class="input-group mb-3">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fa fa-truck-loading"></i></span>
                                                </div>
                                                @if (Model.PMOReceived == null)
                                                {
                                                    @Html.EditorFor(model => model.Supplier, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", type = "text", Value = "Not Set" } })
                                                }
                                                else
                                                {
                                                    if (Model.Supplier == null)
                                                    {
                                                        @Html.HiddenFor(d => d.PAPCode)
                                                        @Html.DropDownList("Supplier", null, htmlAttributes: new { @class = "form-control form-control-sm", style = "font-size: 100%" })
                                                    }
                                                    else
                                                    {
                                                        @Html.HiddenFor(d => d.Supplier)
                                                        @Html.DropDownList("Supplier", null, htmlAttributes: new { @class = "form-control form-control-sm", style = "font-size: 100%", disabled = "disabled" })
                                                    }
                                                }
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Supplier, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-12">
                                        <div class="row">
                                            <div class="col-sm-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(d => d.DateOfDelivery, htmlAttributes: new { @class = "control-label" })
                                                    <div class="input-group mb-3">
                                                        <div class="input-group-prepend">
                                                            <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                                        </div>
                                                        @if (Model.PMOReceived == null)
                                                        {
                                                            @Html.EditorFor(d => d.DateOfDelivery, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "font-size: 100%; text-align:center;", disabled = "disabled", Value = "Not Set" } })
                                                        }
                                                        else
                                                        {
                                                            if (Model.PlaceOfDelivery == null)
                                                            {
                                                                @Html.EditorFor(d => d.DateOfDelivery, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "font-size: 100%; text-align:center;", type = "number", step = "1", min = "1", Value = 1 } })
                                                            }
                                                            else
                                                            {
                                                                @Html.HiddenFor(d => d.DateOfDelivery)
                                                                @Html.EditorFor(d => d.DateOfDelivery, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "font-size: 100%; text-align:center;", disabled = "disabled", Value = Model.DateOfDelivery } })
                                                            }
                                                        }
                                                    </div>
                                                    @Html.ValidationMessageFor(model => model.DateOfDelivery, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                                </div>
                                            </div>
                                            <div class="col-sm-8">
                                                <br />
                                                <p class="mt-2"> days calendar days upon receipt of NTP</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-12">
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.PlaceOfDelivery, htmlAttributes: new { @class = "control-label" })
                                            <div class="input-group mb-3">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fa fa-building"></i></span>
                                                </div>
                                                @if (Model.PMOReceived == null)
                                                {
                                                    @Html.EditorFor(d => d.PlaceOfDelivery, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "font-size: 100%", disabled = "disabled", Value = "Not Set" } })
                                                }
                                                else
                                                {
                                                    if (Model.PlaceOfDelivery == null)
                                                    {
                                                        @Html.HiddenFor(d => d.PAPCode)
                                                        @Html.EditorFor(d => d.PlaceOfDelivery, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "font-size: 100%" } })
                                                    }
                                                    else
                                                    {
                                                        @Html.HiddenFor(d => d.PlaceOfDelivery)
                                                        @Html.EditorFor(d => d.PlaceOfDelivery, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "font-size: 100%", disabled = "disabled", Value = Model.PlaceOfDelivery } })
                                                    }
                                                }
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Supplier, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-12">
                                        <table class="table table-striped">
                                            <thead>
                                                <tr>
                                                    <th style="text-align:center; vertical-align:middle;">@Html.DisplayNameFor(d => d.Items.FirstOrDefault().ItemCode)</th>
                                                    <th style="text-align:center; vertical-align:middle;">@Html.DisplayNameFor(d => d.Items.FirstOrDefault().IndividualUOMReference)</th>
                                                    <th style="text-align:center; vertical-align:middle;">@Html.DisplayNameFor(d => d.Items.FirstOrDefault().ItemName)</th>
                                                    <th style="text-align:center; vertical-align:middle;">@Html.DisplayNameFor(d => d.Items.FirstOrDefault().TotalQty)</th>
                                                    <th style="text-align:center; vertical-align:middle;">@Html.DisplayNameFor(d => d.Items.FirstOrDefault().UnitCost)</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @for (var item = 0; item < Model.Items.Count; item++)
                                                {
                                                    <tr>
                                                        <td style="text-align:center; vertical-align:middle;">
                                                            @Html.HiddenFor(d => Model.Items[item].ItemCode)
                                                            @Html.DisplayFor(d => Model.Items[item].ItemCode)
                                                        </td>
                                                        <td style="text-align:center; vertical-align:middle;">@Html.DisplayFor(d => Model.Items[item].IndividualUOMReference)</td>
                                                        <td style="text-align:left; vertical-align:middle;">@Html.DisplayFor(d => Model.Items[item].ItemName)</td>
                                                        <td style="text-align:center; vertical-align:middle;">
                                                            @Html.HiddenFor(d => Model.Items[item].TotalQty)
                                                            @Html.DisplayFor(d => Model.Items[item].TotalQty)
                                                        </td>
                                                        <td>
                                                            @if (Model.PMOReceived == null)
                                                            {
                                                                @Html.EditorFor(d => Model.Items[item].UnitCost, new { htmlAttributes = new { @class = "form-control form-control-sm", type = "text", Value = "Not Set", disabled = "disabled" } })
                                                            }
                                                            else
                                                            {
                                                                if (Model.PONumber == null)
                                                                {
                                                                    @Html.EditorFor(d => Model.Items[item].UnitCost, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "text-align:right", type = "number", Value = Model.Items[item].UnitCost, max = Model.Items[item].UnitCost, min = "0.00", step = "0.01" } })
                                                                }
                                                                else
                                                                {
                                                                    @Html.EditorFor(d => Model.Items[item].UnitCost, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "text-align:right", type = "text", Value = Model.Items[item].UnitCost.ToString("C", new System.Globalization.CultureInfo("en-ph")), disabled = "disabled" } })
                                                                }

                                                            }
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            <div class="row">
                                <div class="col-sm-12">
                                    <div style="text-align:right;">
                                        @if (Model.ProjectCost == 0.00m && Model.PMOReceived != null)
                                        {
                                            <button class="btn btn-md btn-primary" onclick='UpdateContractDetails()' id="btn-update"><i class="fa fa-edit"></i> Update this Activity</button>
                                        }
                                        else
                                        {
                                            <a class="btn btn-md btn-primary" href="@Url.Action("print-purchase-order", "MyProjects", new { Area = "procurement", PAPCode = Model.PAPCode })" target="_blank"><i class="fa fa-print"></i> Print Purchase Order</a>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-sm-12">
                    <div class="card card-secondary">
                        <div class="card-header">
                            <span style="font-size:14pt;"><b>NOTICE OF AWARD ISSUANCE</b></span>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-lg-3 col-md-3 col-sm-12">
                                    <div class="form-group">
                                        @Html.LabelFor(d => d.ActualNOAIssuance, htmlAttributes: new { @class = "control-label" })
                                        <div class="input-group mb-3">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                            </div>
                                            @if (Model.PMOReceived == null)
                                            {
                                                @Html.EditorFor(model => model.ActualNOAIssuance, new { htmlAttributes = new { @class = "form-control form-control-sm", Value = "Not Set", disabled = "disabled" } })
                                            }
                                            else
                                            {
                                                if (Model.ActualNOAIssuance == null)
                                                {
                                                    @Html.EditorFor(model => model.ActualNOAIssuance, new { htmlAttributes = new { @class = "form-control form-control-sm", autocomplete = "off" } })
                                                }
                                                else
                                                {
                                                    @Html.HiddenFor(d => d.ActualNOAIssuance)
                                                    @Html.EditorFor(model => model.ActualNOAIssuance, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.ActualNOAIssuance).ToString("dd MMMM yyyy") } })
                                                }
                                            }
                                        </div>
                                        @Html.ValidationMessageFor(model => model.ActualNOAIssuance, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-12">
                                    <div class="form-group">
                                        @Html.LabelFor(d => d.ActualNOAIssuance, htmlAttributes: new { @class = "control-label" })
                                        <div class="input-group mb-3">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                            </div>
                                            @if (Model.PMOReceived == null)
                                            {
                                                @Html.EditorFor(model => model.ActualNOAIssuance, new { htmlAttributes = new { @class = "form-control form-control-sm", Value = "Not Set", disabled = "disabled" } })
                                            }
                                            else
                                            {
                                                if (Model.ActualNOAIssuance == null)
                                                {
                                                    @Html.EditorFor(model => model.ActualNOAIssuance, new { htmlAttributes = new { @class = "form-control form-control-sm", autocomplete = "off" } })
                                                }
                                                else
                                                {
                                                    @Html.HiddenFor(d => d.ActualNOAIssuance)
                                                    @Html.EditorFor(model => model.ActualNOAIssuance, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.ActualNOAIssuance).ToString("dd MMMM yyyy") } })
                                                }
                                            }
                                        </div>
                                        @Html.ValidationMessageFor(model => model.ActualNOAIssuance, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-12">
                                    <div class="form-group">
                                        @Html.LabelFor(d => d.ActualNOAIssuance, htmlAttributes: new { @class = "control-label" })
                                        <div class="input-group mb-3">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                            </div>
                                            @if (Model.ActualNOAIssuance == null)
                                            {
                                                @Html.EditorFor(model => model.NOASignedByHOPE, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = "Not Set" } })
                                            }
                                            else
                                            {
                                                if (Model.NOASignedByHOPE == null)
                                                {
                                                    @Html.HiddenFor(d => d.PAPCode)
                                                    @Html.EditorFor(model => model.NOASignedByHOPE, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                                }
                                                else
                                                {
                                                    @Html.HiddenFor(d => d.NOASignedByHOPE)
                                                    @Html.EditorFor(model => model.NOASignedByHOPE, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.ActualNOAIssuance).ToString("dd MMMM yyyy") } })
                                                }
                                            }
                                        </div>
                                        @Html.ValidationMessageFor(model => model.NOASignedByHOPE, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                    </div>
                                </div>
                                <div class="col-lg-3 col-md-3 col-sm-12">
                                    <div class="form-group">
                                        @Html.LabelFor(d => d.NOAReceivedBySupplier, htmlAttributes: new { @class = "control-label" })
                                        <div class="input-group mb-3">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                            </div>
                                            @if (Model.ActualNOAIssuance == null)
                                            {
                                                @Html.EditorFor(model => model.NOAReceivedBySupplier, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = "Not Set" } })
                                            }
                                            else
                                            {
                                                if (Model.NOASignedByHOPE == null)
                                                {
                                                    @Html.HiddenFor(d => d.PAPCode)
                                                    @Html.EditorFor(model => model.NOAReceivedBySupplier, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                                }
                                                else
                                                {
                                                    @Html.HiddenFor(d => d.NOAReceivedBySupplier)
                                                    @Html.EditorFor(model => model.NOAReceivedBySupplier, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = ((DateTime)Model.NOAReceivedBySupplier).ToString("dd MMMM yyyy") } })
                                                }
                                            }
                                        </div>
                                        @Html.ValidationMessageFor(model => model.NOASignedByHOPE, "", new { @class = "text-danger", id = "valitade-PreProcurement" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-12">
                                    @Html.LabelFor(d => d.NOAIssuanceRemarks, htmlAttributes: new { @class = "control-label" })
                                    @if (Model.ActualNOAIssuance == null)
                                    {
                                        @Html.EditorFor(model => model.NOAIssuanceRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                                    }
                                    else
                                    {
                                        if (Model.NOAIssuanceRemarks == null)
                                        {
                                            @Html.EditorFor(model => model.NOAIssuanceRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                        }
                                        else
                                        {
                                            @Html.HiddenFor(d => d.NOAIssuanceRemarks)
                                            @Html.EditorFor(model => model.NOAIssuanceRemarks, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", Value = Model.NOAIssuanceRemarks } })
                                        }
                                    }
                                    @Html.ValidationMessageFor(model => model.NOAIssuanceRemarks, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        @if (Model.NOAReceivedBySupplier == null && Model.PMOReceived != null)
                        {
                            <div class="card-footer">
                                <div class="row">
                                    <div class="col-sm-12">
                                        <div style="text-align:right;">
                                            <button class="btn btn-md btn-primary" onclick='UpdateNoticeOfAward()' id="btn-update"><i class="fa fa-edit"></i> Update this Activity</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br />
}