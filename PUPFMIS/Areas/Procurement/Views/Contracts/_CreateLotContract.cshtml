@model PUPFMIS.Models.LotProcurementProjectVM
@using PUPFMIS.Helpers;

<div class="row">
    <div class="col-sm-12 col-md-7 col-lg-7 order-2 order-md-2">
        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-header"><h5 class="card-title text-primary"><i class="fas fa-file-contract"></i> <b>Other Details</b></h5></div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12">
                                <div class="info-box">
                                    <span class="info-box-icon bg-info elevation-1"><i class="fas fa-coins"></i></span>
                                    <div class="info-box-content">
                                        @Html.HiddenFor(d => d.ApprovedBudgetForContract)
                                        <span class="info-box-text text-muted pb-1" style="font-size:11pt; font-weight:bold;">@Html.DisplayNameFor(model => model.ApprovedBudgetForContract)</span>
                                        <span class="info-box-number text-primary mb-0" style="font-size:16pt;">@( Model.ApprovedBudgetForContract.ToString("C", new System.Globalization.CultureInfo("en-ph")) )</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <div class="info-box">
                                    <span class="info-box-icon bg-info elevation-1"><i class="fas fa-lightbulb"></i></span>
                                    <div class="info-box-content">
                                        <span class="info-box-text text-muted pb-1" style="font-size:11pt; font-weight:bold;">@Html.DisplayNameFor(model => model.ContractStatus)</span>
                                        <span class="info-box-number text-primary mb-0" style="font-size:16pt;">@( Model.ContractStatus.GetAttribute<System.ComponentModel.DataAnnotations.DisplayAttribute>().Name )</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <div class="info-box">
                                    <span class="info-box-icon bg-info elevation-1"><i class="fas fa-comment"></i></span>
                                    <div class="info-box-content">
                                        <span class="info-box-text text-muted pb-1" style="font-size:11pt; font-weight:bold;">@Html.DisplayNameFor(model => model.ProcurementProjectStage)</span>
                                        <span class="info-box-number text-primary mb-0" style="font-size:16pt;">@( Model.ProcurementProjectStage.GetAttribute<System.ComponentModel.DataAnnotations.DisplayAttribute>().Name )</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-header"><h3 class="card-title text-primary"><i class="fa fa-file"></i> <b>Additional Details</b></h3></div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => Model.ContractLocation)
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text"><i class="fa fa-map-pin"></i></span>
                                        </div>
                                        @Html.EditorFor(model => Model.ContractLocation, null, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = Html.DisplayNameFor(model => Model.ContractLocation) } })
                                    </div>
                                    @Html.ValidationMessageFor(model => Model.ContractLocation, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => Model.ProjectCoordinator, htmlAttributes: new { @class = "control-label" })
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text"><i class="fa fa-user"></i></span>
                                        </div>
                                        @Html.DropDownList("ProjectCoordinator", null, htmlAttributes: new { @class = "form-control form-control-sm select2", style = "font-size:100%; width:90%" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-12 col-md-5 col-lg-5 order-1 order-md-1">
        <div class="card">
            <div class="card-header"><h5 class="card-title text-primary"><i class="fas fa-file-contract"></i> <b>Contract Details</b></h5></div>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="text-muted">
                            <p class="text-sm">
                                @Html.HiddenFor(model => model.FiscalYear)
                                @Html.DisplayNameFor(model => model.FiscalYear)
                                <b class="d-block text-primary">@Html.DisplayFor(model => model.FiscalYear)</b>
                            </p>
                            <p class="text-sm">
                                @Html.HiddenFor(model => model.PAPCode)
                                @Html.DisplayNameFor(model => model.PAPCode)
                                <b class="d-block text-primary">@Html.DisplayFor(model => model.PAPCode)</b>
                            </p>
                            <p class="text-sm">
                                @Html.HiddenFor(model => model.ContractCode)
                                @Html.DisplayNameFor(model => model.ContractCode)
                                <b class="d-block text-primary">@Html.DisplayFor(model => model.ContractCode)</b>
                            </p>
                            <p class="text-sm">
                                @Html.HiddenFor(model => model.ContractName)
                                @Html.DisplayNameFor(model => model.ContractName)
                                <b class="d-block text-primary">@Html.DisplayFor(model => model.ContractName)</b>
                            </p>
                            <p class="text-sm">
                                @Html.HiddenFor(model => model.ProcurementProjectType)
                                @Html.DisplayNameFor(model => model.ProcurementProjectType)
                                <b class="d-block text-primary">@( Model.ProcurementProjectType.GetAttribute<System.ComponentModel.DataAnnotations.DisplayAttribute>().Name )</b>
                            </p>
                            <p class="text-sm">
                                @Html.HiddenFor(model => model.ContractStrategy)
                                @Html.DisplayNameFor(model => model.ContractStrategy)
                                <b class="d-block text-primary">@( Model.ContractStrategy.GetAttribute<System.ComponentModel.DataAnnotations.DisplayAttribute>().Name )</b>
                            </p>
                            <p class="text-sm">
                                @Html.HiddenFor(model => model.ModeOfProcurement)
                                @Html.HiddenFor(model => model.ModeOfProcurementReference)
                                @Html.DisplayNameFor(model => model.ModeOfProcurement)
                                <b class="d-block text-primary">@Html.DisplayFor(model => model.ModeOfProcurement)</b>
                            </p>
                            <p class="text-sm">
                                @Html.HiddenFor(model => model.Classification)
                                @Html.HiddenFor(model => model.ClassificationReference)
                                @Html.DisplayNameFor(model => model.Classification)
                                <b class="d-block text-primary">@Html.DisplayFor(model => model.Classification)</b>
                            </p>
                            <p class="text-sm">
                                @Html.HiddenFor(model => model.FundDescription)
                                @Html.HiddenFor(model => model.FundSource)
                                @Html.DisplayNameFor(model => model.FundSource)
                                <b class="d-block text-primary">@Html.DisplayFor(model => model.FundDescription)</b>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="card card-primary card-outline">
    <div class="card-header"><h3 class="card-title text-primary"><i class="fa fa-file"></i> <b>Lot Details</b></h3></div>
    <div class="card-header d-flex p-0">
        <ul class="nav nav-pills p-2">
            @for (int i = 0; i < Model.SubContracts.Count; i++)
            {
                if (i == 0)
                {
                    <li class="nav-item" style="font-size:12pt;"><a class="nav-link active" href="@( string.Concat("#", Model.SubContracts[i].ContractCode) )" data-toggle="tab"><i class="fa fa-list"></i>&nbsp; Lot #@(i + 1): @Model.SubContracts[i].ContractName</a></li>
                }
                else
                {
                    <li class="nav-item" style="font-size:12pt;"><a class="nav-link" href="@( string.Concat("#", Model.SubContracts[i].ContractCode) )" data-toggle="tab"><i class="fa fa-list"></i>&nbsp; Lot #@(i + 1): @Model.SubContracts[i].ContractName</a></li>
                }
            }
        </ul>
    </div>
    <div class="tab-content">
        @for (int i = 0; i < Model.SubContracts.Count; i++)
            {
                if (i == 0)
                {
                <div class="tab-pane active" id="@Model.SubContracts[i].ContractCode">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="card">
                                    <div class="card-header"><h3 class="card-title text-primary" style="font-size:14pt; font-weight:bold"><i class="fas fa-bookmark"></i> &nbsp; Lot #@(i + 1) @Model.SubContracts[i].ContractName <small>(@Model.SubContracts[i].ContractCode)</small></h3></div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <p class="text-sm">
                                                    @Html.HiddenFor(model => model.SubContracts[i].ContractCode)
                                                    @Html.DisplayNameFor(model => model.SubContracts[i].ContractCode)
                                                    <b class="d-block text-primary">@Html.DisplayFor(model => model.SubContracts[i].ContractCode)</b>
                                                </p>
                                                <p class="text-sm">
                                                    @Html.HiddenFor(model => model.SubContracts[i].ContractName)
                                                    @Html.DisplayNameFor(model => model.SubContracts[i].ContractName)
                                                    <b class="d-block text-primary">@Html.DisplayFor(model => model.SubContracts[i].ContractName)</b>
                                                </p>
                                            </div>
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <p class="text-sm">
                                                    @Html.HiddenFor(model => model.SubContracts[i].ApprovedBudgetForContract)
                                                    @Html.DisplayNameFor(model => model.SubContracts[i].ApprovedBudgetForContract)
                                                    <b class="d-block text-primary">@( Model.SubContracts[i].ApprovedBudgetForContract.ToString("C", new System.Globalization.CultureInfo("en-ph")) )</b>
                                                </p>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => Model.SubContracts[i].DeliveryPeriod)
                                                    <div class="input-group">
                                                        <div class="input-group-prepend">
                                                            <span class="input-group-text"><i class="fa fa-calendar-check"></i></span>
                                                        </div>
                                                        @Html.EditorFor(model => Model.SubContracts[i].DeliveryPeriod, null, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = "No. of Calendar Days", min = "1", Value = Model.SubContracts[i].DeliveryPeriod == 0 ? (int?)null : Model.SubContracts[i].DeliveryPeriod } })
                                                    </div>
                                                    @Html.ValidationMessageFor(model => Model.SubContracts[i].DeliveryPeriod, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="card">
                                    <div class="card-header"><h3 class="card-title text-primary" style="font-size:14pt; font-weight:bold"><i class="fas fa-pencil-ruler"></i> &nbsp; Project Items</h3></div>
                                    <div class="card-body">
                                        <div class="card-body table-responsive p-sm-0">
                                            <table class="table table-striped table-hover display">
                                                <thead>
                                                    <tr>
                                                        <th style="text-align:center; vertical-align:middle" width="5%">Item No.</th>
                                                        <th style="text-align:center; vertical-align:middle" width="10%">Quantity</th>
                                                        <th style="text-align:center; vertical-align:middle" width="10%">Unit</th>
                                                        <th style="text-align:center; vertical-align:middle" width="40%">Item Description</th>
                                                        <th style="text-align:center; vertical-align:middle" width="15%">Unit Cost</th>
                                                        <th style="text-align:center; vertical-align:middle" width="20%">Total Cost</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @for (int x = 0; x < Model.SubContracts[i].ContractItems.Count; x++)
                                                    {
                                                        <tr>
                                                            <td style="text-align:center; vertical-align:middle;">@( x + 1 )</td>
                                                            <td style="text-align:center; vertical-align:middle;">
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].Quantity)
                                                                @Html.DisplayFor(model => Model.SubContracts[i].ContractItems[x].Quantity)
                                                            </td>
                                                            <td style="text-align:center; vertical-align:middle;">
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].UOMReference)
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].UnitOfMeasure)
                                                                @Html.DisplayFor(model => Model.SubContracts[i].ContractItems[x].UnitOfMeasure)
                                                            </td>
                                                            <td style="text-align:left; vertical-align:middle;">
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].ArticleReference)
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].ItemSequence)
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].ItemFullName)
                                                                @Html.DisplayFor(model => Model.SubContracts[i].ContractItems[x].ItemFullName)
                                                            </td>
                                                            <td style="text-align:right; vertical-align:middle;">
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].EstimatedUnitCost)
                                                                @( Model.SubContracts[i].ContractItems[x].EstimatedUnitCost.ToString("N", new System.Globalization.CultureInfo("en-ph")) )
                                                            </td>
                                                            <td style="text-align:right; vertical-align:middle;">
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].ApprovedBudgetForItem)
                                                                @( Model.SubContracts[i].ContractItems[x].ApprovedBudgetForItem.ToString("N", new System.Globalization.CultureInfo("en-ph")) )
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="tab-pane" id="@Model.SubContracts[i].ContractCode">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="card">
                                    <div class="card-header"><h3 class="card-title text-primary" style="font-size:14pt; font-weight:bold"><i class="fas fa-bookmark"></i> &nbsp; Lot #@(i + 1) @Model.SubContracts[i].ContractName <small>(@Model.SubContracts[i].ContractCode)</small></h3></div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <p class="text-sm">
                                                    @Html.HiddenFor(model => model.SubContracts[i].ContractCode)
                                                    @Html.DisplayNameFor(model => model.SubContracts[i].ContractCode)
                                                    <b class="d-block text-primary">@Html.DisplayFor(model => model.SubContracts[i].ContractCode)</b>
                                                </p>
                                                <p class="text-sm">
                                                    @Html.HiddenFor(model => model.SubContracts[i].ContractName)
                                                    @Html.DisplayNameFor(model => model.SubContracts[i].ContractName)
                                                    <b class="d-block text-primary">@Html.DisplayFor(model => model.SubContracts[i].ContractName)</b>
                                                </p>
                                            </div>
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <p class="text-sm">
                                                    @Html.HiddenFor(model => model.SubContracts[i].ApprovedBudgetForContract)
                                                    @Html.DisplayNameFor(model => model.SubContracts[i].ApprovedBudgetForContract)
                                                    <b class="d-block text-primary">@( Model.SubContracts[i].ApprovedBudgetForContract.ToString("C", new System.Globalization.CultureInfo("en-ph")) )</b>
                                                </p>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => Model.SubContracts[i].DeliveryPeriod)
                                                    <div class="input-group">
                                                        <div class="input-group-prepend">
                                                            <span class="input-group-text"><i class="fa fa-calendar-check"></i></span>
                                                        </div>
                                                        @Html.EditorFor(model => Model.SubContracts[i].DeliveryPeriod, null, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = "No. of Calendar Days", min = "1", Value = Model.SubContracts[i].DeliveryPeriod == 0 ? (int?)null : Model.SubContracts[i].DeliveryPeriod } })
                                                    </div>
                                                    @Html.ValidationMessageFor(model => Model.SubContracts[i].DeliveryPeriod, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="card">
                                    <div class="card-header"><h3 class="card-title text-primary" style="font-size:14pt; font-weight:bold"><i class="fas fa-pencil-ruler"></i> &nbsp; Project Items</h3></div>
                                    <div class="card-body">
                                        <div class="card-body table-responsive p-sm-0">
                                            <table class="table table-striped table-hover display">
                                                <thead>
                                                    <tr>
                                                        <th style="text-align:center; vertical-align:middle" width="5%">Item No.</th>
                                                        <th style="text-align:center; vertical-align:middle" width="10%">Quantity</th>
                                                        <th style="text-align:center; vertical-align:middle" width="10%">Unit</th>
                                                        <th style="text-align:center; vertical-align:middle" width="40%">Item Description</th>
                                                        <th style="text-align:center; vertical-align:middle" width="15%">Unit Cost</th>
                                                        <th style="text-align:center; vertical-align:middle" width="20%">Total Cost</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @for (int x = 0; x < Model.SubContracts[i].ContractItems.Count; x++)
                                                    {
                                                        <tr>
                                                            <td style="text-align:center; vertical-align:middle;">@( x + 1 )</td>
                                                            <td style="text-align:center; vertical-align:middle;">
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].Quantity)
                                                                @Html.DisplayFor(model => Model.SubContracts[i].ContractItems[x].Quantity)
                                                            </td>
                                                            <td style="text-align:center; vertical-align:middle;">
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].UOMReference)
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].UnitOfMeasure)
                                                                @Html.DisplayFor(model => Model.SubContracts[i].ContractItems[x].UnitOfMeasure)
                                                            </td>
                                                            <td style="text-align:left; vertical-align:middle;">
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].ArticleReference)
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].ItemSequence)
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].ItemFullName)
                                                                @Html.DisplayFor(model => Model.SubContracts[i].ContractItems[x].ItemFullName)
                                                            </td>
                                                            <td style="text-align:right; vertical-align:middle;">
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].EstimatedUnitCost)
                                                                @( Model.SubContracts[i].ContractItems[x].EstimatedUnitCost.ToString("N", new System.Globalization.CultureInfo("en-ph")) )
                                                            </td>
                                                            <td style="text-align:right; vertical-align:middle;">
                                                                @Html.HiddenFor(model => Model.SubContracts[i].ContractItems[x].ApprovedBudgetForItem)
                                                                @( Model.SubContracts[i].ContractItems[x].ApprovedBudgetForItem.ToString("N", new System.Globalization.CultureInfo("en-ph")) )
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>
<div class="card card-primary card-outline">
    <div class="card-header"><h3 class="card-title text-primary"><i class="fa fa-calendar"></i> <b>Project Timeline</b></h3></div>
    <div class="card-body">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => Model.PRSubmissionOpen, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group date" id="PRSubmissionOpen1" data-target-input="nearest">
                        <div class="input-group-prepend" data-target="#PRSubmissionOpen1" data-toggle="datetimepicker">
                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                        @Html.EditorFor(model => Model.PRSubmissionOpen, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#PRSubmissionOpen1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.PRSubmissionOpen), Value = Model.PRSubmissionOpen == null || Model.PRSubmissionOpen == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.PRSubmissionOpen } })
                    </div>
                    @Html.ValidationMessageFor(model => Model.PRSubmissionOpen, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => Model.PRSubmissionClose, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group date" id="PRSubmissionClose1" data-target-input="nearest">
                        <div class="input-group-prepend" data-target="#PRSubmissionClose1" data-toggle="datetimepicker">
                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                        @Html.EditorFor(model => Model.PRSubmissionClose, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#PRSubmissionClose1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.PRSubmissionClose), Value = Model.PRSubmissionClose == null || Model.PRSubmissionClose == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.PRSubmissionClose } })
                    </div>
                    @Html.ValidationMessageFor(model => Model.PRSubmissionOpen, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => Model.IBPreparation, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group date" id="IBPreparation1" data-target-input="nearest">
                        <div class="input-group-prepend" data-target="#IBPreparation1" data-toggle="datetimepicker">
                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                        @Html.EditorFor(model => Model.IBPreparation, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#IBPreparation1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.IBPreparation), Value = Model.IBPreparation == null || Model.IBPreparation == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.IBPreparation } })
                    </div>
                    @Html.ValidationMessageFor(model => Model.IBPreparation, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => Model.PostingOfIB, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group date" id="PostingOfIB1" data-target-input="nearest">
                        <div class="input-group-prepend" data-target="#PostingOfIB1" data-toggle="datetimepicker">
                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                        @Html.EditorFor(model => Model.PostingOfIB, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#PostingOfIB1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.PostingOfIB), Value = Model.PostingOfIB == null || Model.PostingOfIB == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.PostingOfIB } })
                    </div>
                    @Html.ValidationMessageFor(model => Model.PostingOfIB, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-sm-12">
                <div class="card card-primary card-outline">
                    <div class="card-header d-flex p-0">
                        <ul class="nav nav-pills p-2">
                            @for (int i = 0; i < Model.SubContracts.Count; i++)
                            {
                                if (i == 0)
                                {
                                    <li class="nav-item" style="font-size:12pt;"><a class="nav-link active" href="@( string.Concat("#", Model.SubContracts[i].ContractCode, "_Timeline") )" data-toggle="tab"><i class="fa fa-list"></i>&nbsp; Lot #@(i + 1): @Model.SubContracts[i].ContractName</a></li>
                                }
                                else
                                {
                                    <li class="nav-item" style="font-size:12pt;"><a class="nav-link" href="@( string.Concat("#", Model.SubContracts[i].ContractCode, "_Timeline") )" data-toggle="tab"><i class="fa fa-list"></i>&nbsp; Lot #@(i + 1): @Model.SubContracts[i].ContractName</a></li>
                                }
                            }
                        </ul>
                    </div>
                    <div class="tab-content">
                        @for (int i = 0; i < Model.SubContracts.Count; i++)
                        {
                            if (i == 0)
                            {
                                <div class="tab-pane active" id="@( string.Concat(Model.SubContracts[i].ContractCode, "_Timeline") )">
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.SubContracts[i].PreProcurementConference, htmlAttributes: new { @class = "control-label" })
                                                    <div class="input-group date" id="@(string.Concat("PreProcurementConference1", i.ToString()))" data-target-input="nearest">
                                                        <div class="input-group-prepend" data-target="@(string.Concat("#PreProcurementConference1", i.ToString()))" data-toggle="datetimepicker">
                                                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                        </div>
                                                        @Html.EditorFor(model => Model.SubContracts[i].PreProcurementConference, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#PreProcurementConference1", i.ToString())), style = "font-size: 100%", placeholder = Html.DisplayShortNameFor(model => Model.SubContracts[i].PreProcurementConference).ToString() + " (Optional, only if applicable)", Value = Model.SubContracts[i].PreProcurementConference == null || Model.SubContracts[i].PreProcurementConference == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[i].PreProcurementConference } })
                                                    </div>
                                                    @Html.ValidationMessageFor(model => Model.SubContracts[i].PreProcurementConference, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.SubContracts[i].PreBidConference, htmlAttributes: new { @class = "control-label" })
                                                    <div class="input-group date" id="@(string.Concat("PreBidConference1", i.ToString()))" data-target-input="nearest">
                                                        <div class="input-group-prepend" data-target="@(string.Concat("#PreBidConference1", i.ToString()))" data-toggle="datetimepicker">
                                                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                        </div>
                                                        @Html.EditorFor(model => Model.SubContracts[i].PreBidConference, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#PreBidConference1", i.ToString())), style = "font-size: 100%", placeholder = Html.DisplayShortNameFor(model => Model.SubContracts[i].PreBidConference).ToString(), Value = Model.SubContracts[i].PreBidConference == null || Model.SubContracts[i].PreBidConference == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[i].PreBidConference } })
                                                    </div>
                                                    @Html.ValidationMessageFor(model => Model.SubContracts[i].PreBidConference, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <div class="form-group">
                                                    @Html.Label(Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids).ToString(), htmlAttributes: new { @class = "control-label" })
                                                    <div class="input-group date" id="@(string.Concat("DeadlineOfSubmissionOfBids1", i.ToString()))" data-target-input="nearest">
                                                        <div class="input-group-prepend" data-target="@(string.Concat("#DeadlineOfSubmissionOfBids1", i.ToString()))" data-toggle="datetimepicker">
                                                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                        </div>
                                                        @Html.EditorFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#DeadlineOfSubmissionOfBids1", i.ToString())), style = "font-size: 100%", placeholder = Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids).ToString(), Value = Model.SubContracts[i].DeadlineOfSubmissionOfBids == null || Model.SubContracts[i].DeadlineOfSubmissionOfBids == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[i].DeadlineOfSubmissionOfBids } })
                                                    </div>
                                                    @Html.ValidationMessageFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <div class="form-group">
                                                    @Html.Label(Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[i].OpeningOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[i].OpeningOfBids).ToString(), htmlAttributes: new { @class = "control-label" })
                                                    <div class="input-group date" id="@(string.Concat("OpeningOfBids1", i.ToString()))" data-target-input="nearest">
                                                        <div class="input-group-prepend" data-target="@(string.Concat("#OpeningOfBids1", i.ToString()))" data-toggle="datetimepicker">
                                                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                        </div>
                                                        @Html.EditorFor(model => Model.SubContracts[i].OpeningOfBids, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#OpeningOfBids1", i.ToString())), style = "font-size: 100%", placeholder = Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[i].OpeningOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[i].OpeningOfBids).ToString(), Value = Model.SubContracts[i].OpeningOfBids == null || Model.SubContracts[i].OpeningOfBids == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[i].OpeningOfBids } })
                                                    </div>
                                                    @Html.ValidationMessageFor(model => Model.SubContracts[i].OpeningOfBids, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="tab-pane" id="@( string.Concat(Model.SubContracts[i].ContractCode, "_Timeline") )">
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.SubContracts[i].PreProcurementConference, htmlAttributes: new { @class = "control-label" })
                                                    <div class="input-group date" id="@(string.Concat("PreProcurementConference1", i.ToString()))" data-target-input="nearest">
                                                        <div class="input-group-prepend" data-target="@(string.Concat("#PreProcurementConference1", i.ToString()))" data-toggle="datetimepicker">
                                                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                        </div>
                                                        @Html.EditorFor(model => Model.SubContracts[i].PreProcurementConference, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#PreProcurementConference1", i.ToString())), style = "font-size: 100%", placeholder = Html.DisplayShortNameFor(model => Model.SubContracts[i].PreProcurementConference).ToString() + " (Optional, only if applicable)", Value = Model.SubContracts[i].PreProcurementConference == null || Model.SubContracts[i].PreProcurementConference == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[i].PreProcurementConference } })
                                                    </div>
                                                    @Html.ValidationMessageFor(model => Model.SubContracts[i].PreProcurementConference, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.SubContracts[i].PreBidConference, htmlAttributes: new { @class = "control-label" })
                                                    <div class="input-group date" id="@(string.Concat("PreBidConference1", i.ToString()))" data-target-input="nearest">
                                                        <div class="input-group-prepend" data-target="@(string.Concat("#PreBidConference1", i.ToString()))" data-toggle="datetimepicker">
                                                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                        </div>
                                                        @Html.EditorFor(model => Model.SubContracts[i].PreBidConference, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#PreBidConference1", i.ToString())), style = "font-size: 100%", placeholder = Html.DisplayShortNameFor(model => Model.SubContracts[i].PreBidConference).ToString(), Value = Model.SubContracts[i].PreBidConference == null || Model.SubContracts[i].PreBidConference == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[i].PreBidConference } })
                                                    </div>
                                                    @Html.ValidationMessageFor(model => Model.SubContracts[i].PreBidConference, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <div class="form-group">
                                                    @Html.Label(Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids).ToString(), htmlAttributes: new { @class = "control-label" })
                                                    <div class="input-group date" id="@(string.Concat("DeadlineOfSubmissionOfBids1", i.ToString()))" data-target-input="nearest">
                                                        <div class="input-group-prepend" data-target="@(string.Concat("#DeadlineOfSubmissionOfBids1", i.ToString()))" data-toggle="datetimepicker">
                                                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                        </div>
                                                        @Html.EditorFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#DeadlineOfSubmissionOfBids1", i.ToString())), style = "font-size: 100%", placeholder = Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids).ToString(), Value = Model.SubContracts[i].DeadlineOfSubmissionOfBids == null || Model.SubContracts[i].DeadlineOfSubmissionOfBids == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[i].DeadlineOfSubmissionOfBids } })
                                                    </div>
                                                    @Html.ValidationMessageFor(model => Model.SubContracts[i].DeadlineOfSubmissionOfBids, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-6 col-sm-12">
                                                <div class="form-group">
                                                    @Html.Label(Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[i].OpeningOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[i].OpeningOfBids).ToString(), htmlAttributes: new { @class = "control-label" })
                                                    <div class="input-group date" id="@(string.Concat("OpeningOfBids1", i.ToString()))" data-target-input="nearest">
                                                        <div class="input-group-prepend" data-target="@(string.Concat("#OpeningOfBids1", i.ToString()))" data-toggle="datetimepicker">
                                                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                        </div>
                                                        @Html.EditorFor(model => Model.SubContracts[i].OpeningOfBids, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#OpeningOfBids1", i.ToString())), style = "font-size: 100%", placeholder = Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[i].OpeningOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[i].OpeningOfBids).ToString(), Value = Model.SubContracts[i].OpeningOfBids == null || Model.SubContracts[i].OpeningOfBids == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[i].OpeningOfBids } })
                                                    </div>
                                                    @Html.ValidationMessageFor(model => Model.SubContracts[i].OpeningOfBids, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => Model.NOAIssuance, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group date" id="NOAIssuance1" data-target-input="nearest">
                        <div class="input-group-prepend" data-target="#NOAIssuance1" data-toggle="datetimepicker">
                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                        @Html.EditorFor(model => Model.NOAIssuance, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#NOAIssuance1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.NOAIssuance), Value = Model.NOAIssuance == null || Model.NOAIssuance == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.NOAIssuance } })
                    </div>
                    @Html.ValidationMessageFor(model => Model.NOAIssuance, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => Model.NTPIssuance, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group date" id="NTPIssuance1" data-target-input="nearest">
                        <div class="input-group-prepend" data-target="#NTPIssuance1" data-toggle="datetimepicker">
                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                        @Html.EditorFor(model => Model.NTPIssuance, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#NTPIssuance1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.NTPIssuance), Value = Model.NTPIssuance == null || Model.NTPIssuance == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.NTPIssuance } })
                    </div>
                    @Html.ValidationMessageFor(model => Model.NTPIssuance, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
</div>







@*<div class="row">
    <div class="col-12 col-sm-4">
        <div class="info-box bg-light">
            <div class="info-box-content">
                @Html.HiddenFor(model => model.ApprovedBudgetForContract)
                <span class="info-box-text text-center text-muted">@Html.DisplayNameFor(model => model.ApprovedBudgetForContract)</span>
                <span class="info-box-number text-primary text-center mb-0" style="font-size:14pt;">@( Model.ApprovedBudgetForContract.ToString("C", new System.Globalization.CultureInfo("en-ph")) )</span>
            </div>
        </div>
    </div>
    <div class="col-12 col-sm-4">
        <div class="info-box bg-light">
            <div class="info-box-content">
                @Html.HiddenFor(model => model.ContractStatus)
                <span class="info-box-text text-center text-muted">@Html.DisplayNameFor(model => model.ContractStatus)</span>
                <span class="info-box-number text-primary text-center mb-0" style="font-size:14pt;">@( Model.ContractStatus.GetAttribute<System.ComponentModel.DataAnnotations.DisplayAttribute>().Name )</span>
            </div>
        </div>
    </div>
    <div class="col-12 col-sm-4">
        <div class="info-box bg-light">
            <div class="info-box-content">
                @Html.HiddenFor(model => model.ProcurementProjectStage)
                <span class="info-box-text text-center text-muted">Estimated project duration</span>
                <span class="info-box-number text-primary text-center mb-0" style="font-size:14pt;">@( Model.ProcurementProjectStage.GetAttribute<System.ComponentModel.DataAnnotations.DisplayAttribute>().Name )</span>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12 col-md-12 col-lg-8 order-2 order-md-2">
        <div class="row">
            <div class="col-sm-12">
                <h5><i class="fas fa-edit"></i> Other Details</h5>
                <hr />
            </div>
            <div class="col-sm-12">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(model => Model.ContractLocation)
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fa fa-map-pin"></i></span>
                                </div>
                                @Html.EditorFor(model => Model.ContractLocation, null, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = Html.DisplayNameFor(model => Model.ContractLocation) } })
                            </div>
                            @Html.ValidationMessageFor(model => Model.ContractLocation, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(model => Model.ProjectCoordinator, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fa fa-user"></i></span>
                                </div>
                                @Html.DropDownList("ProjectCoordinator", null, htmlAttributes: new { @class = "form-control form-control-sm select2", style = "font-size:100%; width:90%" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br /><br />
        <h5><i class="fas fa-pencil-ruler"></i> Contract Items</h5>
        <hr />
        @for (int x = 0; x < Model.SubContracts.Count; x++)
        {
            <div class="card">
                <div class="card-header"><h3 class="card-title text-primary" style="font-weight:bold;">@(Model.ContractStrategy == PUPFMIS.Models.ContractStrategies.LotBidding ? "Lot" : "Item") #@Model.SubContracts[x].LotNo: @Model.SubContracts[x].ContractName <small>(@Model.SubContracts[x].ContractCode)</small></h3></div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="form-group">
                                @Html.LabelFor(model => Model.SubContracts[x].DeliveryPeriod)
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text"><i class="fa fa-calendar-check"></i></span>
                                    </div>
                                    @Html.EditorFor(model => Model.SubContracts[x].DeliveryPeriod, null, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = "No. of Calendar Days", min = "1", Value = Model.SubContracts[x].DeliveryPeriod == 0 ? (int?)null : Model.SubContracts[x].DeliveryPeriod } })
                                </div>
                                @Html.ValidationMessageFor(model => Model.SubContracts[x].DeliveryPeriod, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="card-body table-responsive p-sm-0">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th style="text-align:center; vertical-align:middle" width="5%">Item No.</th>
                                            <th style="text-align:center; vertical-align:middle" width="10%">Quantity</th>
                                            <th style="text-align:center; vertical-align:middle" width="10%">Unit</th>
                                            <th style="text-align:center; vertical-align:middle" width="40%">Item Description</th>
                                            <th style="text-align:center; vertical-align:middle" width="15%">Unit Cost</th>
                                            <th style="text-align:center; vertical-align:middle" width="20%">Total Cost</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < Model.SubContracts[x].ContractItems.Count; i++)
                                        {
                                            <tr>
                                                <td style="text-align:center; vertical-align:middle;">@(i + 1)</td>
                                                <td style="text-align:center; vertical-align:middle;">
                                                    @Html.HiddenFor(model => Model.SubContracts[x].ContractItems[i].Quantity)
                                                    @Html.DisplayFor(model => Model.SubContracts[x].ContractItems[i].Quantity)
                                                </td>
                                                <td style="text-align:center; vertical-align:middle;">
                                                    @Html.HiddenFor(model => Model.SubContracts[x].ContractItems[i].UOMReference)
                                                    @Html.HiddenFor(model => Model.SubContracts[x].ContractItems[i].UnitOfMeasure)
                                                    @Html.DisplayFor(model => Model.SubContracts[x].ContractItems[i].UnitOfMeasure)
                                                </td>
                                                <td style="text-align:left; vertical-align:middle;">
                                                    @Html.HiddenFor(model => Model.SubContracts[x].ContractItems[i].ArticleReference)
                                                    @Html.HiddenFor(model => Model.SubContracts[x].ContractItems[i].ItemSequence)
                                                    @Html.HiddenFor(model => Model.SubContracts[x].ContractItems[i].ItemFullName)
                                                    @Html.DisplayFor(model => Model.SubContracts[x].ContractItems[i].ItemFullName)
                                                </td>
                                                <td style="text-align:right; vertical-align:middle;">
                                                    @Html.HiddenFor(model => Model.SubContracts[x].ContractItems[i].EstimatedUnitCost)
                                                    @( Model.SubContracts[x].ContractItems[i].EstimatedUnitCost.ToString("N", new System.Globalization.CultureInfo("en-ph")) )
                                                </td>
                                                <td style="text-align:right; vertical-align:middle;">
                                                    @Html.HiddenFor(model => Model.SubContracts[x].ContractItems[i].ApprovedBudgetForItem)
                                                    @( Model.SubContracts[x].ContractItems[i].ApprovedBudgetForItem.ToString("N", new System.Globalization.CultureInfo("en-ph")) )
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col-12 col-md-12 col-lg-4 order-1 order-md-1">
        <h5><i class="fas fa-file-contract"></i> Contract Details</h5>
        <hr />
        <div class="text-muted">
            <p class="text-sm">
                @Html.HiddenFor(model => model.FiscalYear)
                @Html.DisplayNameFor(model => model.FiscalYear)
                <b class="d-block text-primary">@Html.DisplayFor(model => model.FiscalYear)</b>
            </p>
            <p class="text-sm">
                @Html.HiddenFor(model => model.PAPCode)
                @Html.DisplayNameFor(model => model.PAPCode)
                <b class="d-block text-primary">@Html.DisplayFor(model => model.PAPCode)</b>
            </p>
            <p class="text-sm">
                @Html.HiddenFor(model => model.ContractCode)
                @Html.DisplayNameFor(model => model.ContractCode)
                <b class="d-block text-primary">@Html.DisplayFor(model => model.ContractCode)</b>
            </p>
            <p class="text-sm">
                @Html.HiddenFor(model => model.ContractName)
                @Html.DisplayNameFor(model => model.ContractName)
                <b class="d-block text-primary">@Html.DisplayFor(model => model.ContractName)</b>
            </p>
            <p class="text-sm">
                @Html.HiddenFor(model => model.ContractStrategy)
                @Html.DisplayNameFor(model => model.ContractStrategy)
                <b class="d-block text-primary">@( Model.ContractStrategy.GetAttribute<System.ComponentModel.DataAnnotations.DisplayAttribute>().Name )</b>
            </p>
            <p class="text-sm">
                @Html.HiddenFor(model => model.Classification)
                @Html.HiddenFor(model => model.ClassificationReference)
                @Html.DisplayNameFor(model => model.Classification)
                <b class="d-block text-primary">@Html.DisplayFor(model => model.Classification)</b>
            </p>
            <p class="text-sm">
                @Html.HiddenFor(model => model.FundSource)
                @Html.HiddenFor(model => model.FundDescription)
                @Html.DisplayNameFor(model => model.FundSource)
                <b class="d-block text-primary">@Html.DisplayFor(model => model.FundDescription)</b>
            </p>
            <p class="text-sm">
                @Html.HiddenFor(model => model.ModeOfProcurement)
                @Html.HiddenFor(model => model.ModeOfProcurementReference)
                @Html.DisplayNameFor(model => model.ModeOfProcurement)
                <b class="d-block text-primary">@Html.DisplayFor(model => model.ModeOfProcurement)</b>
            </p>
        </div>
    </div>
</div>
<hr />
<br /><br />
<h5><i class="fas fa-calendar-plus"></i> Schedule of Activities (Target Dates)</h5>
<hr />
<div class="row">
    <div class="col-lg-6 col-md-6 col-sm-12">
        <div class="form-group">
            @Html.LabelFor(model => Model.PRSubmissionOpen, htmlAttributes: new { @class = "control-label" })
            <div class="input-group date" id="PRSubmissionOpen1" data-target-input="nearest">
                <div class="input-group-prepend" data-target="#PRSubmissionOpen1" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
                @Html.EditorFor(model => Model.PRSubmissionOpen, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#PRSubmissionOpen1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.PRSubmissionOpen), Value = Model.PRSubmissionOpen == null || Model.PRSubmissionOpen == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.PRSubmissionOpen } })
            </div>
            @Html.ValidationMessageFor(model => Model.PRSubmissionOpen, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-lg-6 col-md-6 col-sm-12">
        <div class="form-group">
            @Html.LabelFor(model => Model.PRSubmissionClose, htmlAttributes: new { @class = "control-label" })
            <div class="input-group date" id="PRSubmissionClose1" data-target-input="nearest">
                <div class="input-group-prepend" data-target="#PRSubmissionClose1" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
                @Html.EditorFor(model => Model.PRSubmissionClose, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#PRSubmissionClose1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.PRSubmissionClose), Value = Model.PRSubmissionClose == null || Model.PRSubmissionClose == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.PRSubmissionClose } })
            </div>
            @Html.ValidationMessageFor(model => Model.PRSubmissionOpen, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6 col-md-6 col-sm-12">
        <div class="form-group">
            @Html.LabelFor(model => Model.IBPreparation, htmlAttributes: new { @class = "control-label" })
            <div class="input-group date" id="IBPreparation1" data-target-input="nearest">
                <div class="input-group-prepend" data-target="#IBPreparation1" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
                @Html.EditorFor(model => Model.IBPreparation, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#IBPreparation1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.IBPreparation), Value = Model.IBPreparation == null || Model.IBPreparation == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.IBPreparation } })
            </div>
            @Html.ValidationMessageFor(model => Model.IBPreparation, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-lg-6 col-md-6 col-sm-12">
        <div class="form-group">
            @Html.LabelFor(model => Model.PostingOfIB, htmlAttributes: new { @class = "control-label" })
            <div class="input-group date" id="PostingOfIB1" data-target-input="nearest">
                <div class="input-group-prepend" data-target="#PostingOfIB1" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
                @Html.EditorFor(model => Model.PostingOfIB, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#PostingOfIB1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.PostingOfIB), Value = Model.PostingOfIB == null || Model.PostingOfIB == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.PostingOfIB } })
            </div>
            @Html.ValidationMessageFor(model => Model.PostingOfIB, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
@for (int x = 0; x < Model.SubContracts.Count; x++)
{
    @Html.HiddenFor(model => Model.SubContracts[x].LotNo, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].LotNo") })
    @Html.HiddenFor(model => Model.SubContracts[x].ParentProjectReference, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ParentProjectReference") })
    @Html.HiddenFor(model => Model.SubContracts[x].PAPCode, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].PAPCode") })
    @Html.HiddenFor(model => Model.SubContracts[x].ClassificationReference, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ClassificationReference") })
    @Html.HiddenFor(model => Model.SubContracts[x].Classification, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].Classification") })
    @Html.HiddenFor(model => Model.SubContracts[x].ModeOfProcurementReference, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ModeOfProcurementReference") })
    @Html.HiddenFor(model => Model.SubContracts[x].ModeOfProcurement, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ModeOfProcurement") })
    @Html.HiddenFor(model => Model.SubContracts[x].FiscalYear, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].FiscalYear") })
    @Html.HiddenFor(model => Model.SubContracts[x].FundSource, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].FundSource") })
    @Html.HiddenFor(model => Model.SubContracts[x].FundDescription, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].FundDescription") })
    @Html.HiddenFor(model => Model.SubContracts[x].ProcurementProjectType, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ProcurementProjectType") })
    @Html.HiddenFor(model => Model.SubContracts[x].ProcurementProjectStage, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ProcurementProjectStage") })
    @Html.HiddenFor(model => Model.SubContracts[x].ContractStrategy, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ContractStrategy") })
    @Html.HiddenFor(model => Model.SubContracts[x].ContractStatus, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ContractStatus") })
    @Html.HiddenFor(model => Model.SubContracts[x].ContractLocation, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ContractLocation") })
    @Html.HiddenFor(model => Model.SubContracts[x].ContractName, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ContractName") })
    @Html.HiddenFor(model => Model.SubContracts[x].ContractCode, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ContractCode") })
    @Html.HiddenFor(model => Model.SubContracts[x].ApprovedBudgetForContract, htmlAttributes: new { id = string.Concat("hidden_SubContracts[", x.ToString(), "].ApprovedBudgetForContract") })
    <div class="card">
        <div class="card-header"><h3 class="card-title text-primary" style="font-weight:bold;">@(Model.ContractStrategy == PUPFMIS.Models.ContractStrategies.LotBidding ? "Lot" : "Item") #@Model.SubContracts[x].LotNo: @Model.SubContracts[x].ContractName <small>(@Model.SubContracts[x].ContractCode)</small></h3></div>
        <div class="card-body">
            <div class="row">
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="row">
                                <div class="col-lg-6 col-md-6 col-sm-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SubContracts[x].PreProcurementConference, htmlAttributes: new { @class = "control-label" })
                                        <div class="input-group date" id="@(string.Concat("PreProcurementConference1", x.ToString()))" data-target-input="nearest">
                                            <div class="input-group-prepend" data-target="@(string.Concat("#PreProcurementConference1", x.ToString()))" data-toggle="datetimepicker">
                                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                            </div>
                                            @Html.EditorFor(model => Model.SubContracts[x].PreProcurementConference, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#PreProcurementConference1", x.ToString())), style = "font-size: 100%", placeholder = Html.DisplayShortNameFor(model => Model.SubContracts[x].PreProcurementConference).ToString() + " (Optional, only if applicable)", Value = Model.SubContracts[x].PreProcurementConference == null || Model.SubContracts[x].PreProcurementConference == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[x].PreProcurementConference } })
                                        </div>
                                        @Html.ValidationMessageFor(model => Model.SubContracts[x].PreProcurementConference, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-6 col-sm-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SubContracts[x].PreBidConference, htmlAttributes: new { @class = "control-label" })
                                        <div class="input-group date" id="@(string.Concat("PreBidConference1", x.ToString()))" data-target-input="nearest">
                                            <div class="input-group-prepend" data-target="@(string.Concat("#PreBidConference1", x.ToString()))" data-toggle="datetimepicker">
                                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                            </div>
                                            @Html.EditorFor(model => Model.SubContracts[x].PreBidConference, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#PreBidConference1", x.ToString())), style = "font-size: 100%", placeholder = Html.DisplayShortNameFor(model => Model.SubContracts[x].PreBidConference).ToString(), Value = Model.SubContracts[x].PreBidConference == null || Model.SubContracts[x].PreBidConference == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[x].PreBidConference } })
                                        </div>
                                        @Html.ValidationMessageFor(model => Model.SubContracts[x].PreBidConference, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6 col-md-6 col-sm-12">
                                    <div class="form-group">
                                        @Html.Label(Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[x].DeadlineOfSubmissionOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[x].DeadlineOfSubmissionOfBids).ToString(), htmlAttributes: new { @class = "control-label" })
                                        <div class="input-group date" id="@(string.Concat("DeadlineOfSubmissionOfBids1", x.ToString()))" data-target-input="nearest">
                                            <div class="input-group-prepend" data-target="@(string.Concat("#DeadlineOfSubmissionOfBids1", x.ToString()))" data-toggle="datetimepicker">
                                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                            </div>
                                            @Html.EditorFor(model => Model.SubContracts[x].DeadlineOfSubmissionOfBids, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#DeadlineOfSubmissionOfBids1", x.ToString())), style = "font-size: 100%", placeholder = Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[x].DeadlineOfSubmissionOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[x].DeadlineOfSubmissionOfBids).ToString(), Value = Model.SubContracts[x].DeadlineOfSubmissionOfBids == null || Model.SubContracts[x].DeadlineOfSubmissionOfBids == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[x].DeadlineOfSubmissionOfBids } })
                                        </div>
                                        @Html.ValidationMessageFor(model => Model.SubContracts[x].DeadlineOfSubmissionOfBids, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-6 col-sm-12">
                                    <div class="form-group">
                                        @Html.Label(Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[x].OpeningOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[x].OpeningOfBids).ToString(), htmlAttributes: new { @class = "control-label" })
                                        <div class="input-group date" id="@(string.Concat("OpeningOfBids1", x.ToString()))" data-target-input="nearest">
                                            <div class="input-group-prepend" data-target="@(string.Concat("#OpeningOfBids1", x.ToString()))" data-toggle="datetimepicker">
                                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                            </div>
                                            @Html.EditorFor(model => Model.SubContracts[x].OpeningOfBids, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = (string.Concat("#OpeningOfBids1", x.ToString())), style = "font-size: 100%", placeholder = Model.ModeOfProcurementReference != 1 ? Html.DisplayShortNameFor(model => Model.SubContracts[x].OpeningOfBids).ToString() : Html.DisplayNameFor(model => Model.SubContracts[x].OpeningOfBids).ToString(), Value = Model.SubContracts[x].OpeningOfBids == null || Model.SubContracts[x].OpeningOfBids == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.SubContracts[x].OpeningOfBids } })
                                        </div>
                                        @Html.ValidationMessageFor(model => Model.SubContracts[x].OpeningOfBids, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<div class="row">
    <div class="col-lg-6 col-md-6 col-sm-12">
        <div class="form-group">
            @Html.LabelFor(model => Model.NOAIssuance, htmlAttributes: new { @class = "control-label" })
            <div class="input-group date" id="NOAIssuance1" data-target-input="nearest">
                <div class="input-group-prepend" data-target="#NOAIssuance1" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
                @Html.EditorFor(model => Model.NOAIssuance, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#NOAIssuance1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.NOAIssuance), Value = Model.NOAIssuance == null || Model.NOAIssuance == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.NOAIssuance } })
            </div>
            @Html.ValidationMessageFor(model => Model.NOAIssuance, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-lg-6 col-md-6 col-sm-12">
        <div class="form-group">
            @Html.LabelFor(model => Model.NTPIssuance, htmlAttributes: new { @class = "control-label" })
            <div class="input-group date" id="NTPIssuance1" data-target-input="nearest">
                <div class="input-group-prepend" data-target="#NTPIssuance1" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
                @Html.EditorFor(model => Model.NTPIssuance, new { htmlAttributes = new { @class = "form-control form-control-sm datetimepicker-input", data_target = "#NTPIssuance1", style = "font-size: 100%", placeholder = Html.DisplayNameFor(model => Model.NTPIssuance), Value = Model.NTPIssuance == null || Model.NTPIssuance == Convert.ToDateTime("01/01/0001 12:00 AM") ? (DateTime?)null : Model.NTPIssuance } })
            </div>
            @Html.ValidationMessageFor(model => Model.NTPIssuance, "", new { @class = "text-danger" })
        </div>
    </div>
</div>*@