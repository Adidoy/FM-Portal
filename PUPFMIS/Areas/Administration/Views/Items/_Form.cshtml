@model PUPFMIS.Models.ItemVM

<div class="form-horizontal">
    <div class="row">
        <div class="col-sm-12">
            <div class="bg-info">
                <h5 class="p-2">Item Details</h5>
            </div>
        </div>
    </div>
    <br />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-horizontal">
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ItemType, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-id-badge"></i></span>
                        </div>
                        @if (ViewBag.Action == "Edit")
                        {
                            @Html.DropDownList("ItemType", null, "Please Select Item Type", htmlAttributes: new { @class = "form-control form-control-sm select2", onchange = "GetItemTypeDetails()", disabled = "disabled" })
                        }
                        else
                        {
                            @Html.DropDownList("ItemType", null, "Please Select Item Type", htmlAttributes: new { @class = "form-control form-control-sm select2", onchange = "GetItemTypeDetails()" })
                        }
                    </div>
                    @Html.ValidationMessageFor(model => model.ItemType, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.AccountClass, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-bookmark"></i></span>
                        </div>
                        @Html.EditorFor(model => model.AccountClass, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = Html.DisplayNameFor(d => d.AccountClass), disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.AccountClass, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.InventoryType, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-book"></i></span>
                        </div>
                        @Html.EditorFor(model => model.InventoryType, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = Html.DisplayNameFor(d => d.InventoryType), disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.InventoryType, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.IsTangible, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-question"></i></span>
                        </div>
                        @Html.EditorFor(model => model.IsTangible, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled", placeholder = "Is Tangible?" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.IsTangible, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-bookmark"></i></span>
                        </div>
                        @Html.DropDownList("Category", null, htmlAttributes: new { @class = "form-control form-control-sm select2" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ResponsibilityCenter, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-building"></i></span>
                        </div>
                        @Html.DropDownList("ResponsibilityCenter", null, htmlAttributes: new { @class = "form-control form-control-sm select2", style = "font-size:100%;" })
                    </div>
                    @Html.ValidationMessageFor(model => model.ResponsibilityCenter, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseRequestOffice, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-building"></i></span>
                        </div>
                        @Html.DropDownList("PurchaseRequestOffice", null, htmlAttributes: new { @class = "form-control form-control-sm select2", style = "font-size:100%;" })
                    </div>
                    @Html.ValidationMessageFor(model => model.PurchaseRequestOffice, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProcurementSource, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-building"></i></span>
                        </div>
                        @Html.EnumDropDownListFor(model => model.ProcurementSource, htmlAttributes: new { @class = "form-control form-control-sm" })
                    </div>
                    @Html.ValidationMessageFor(model => model.ProcurementSource, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ItemShortSpecifications, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-id-card"></i></span>
                        </div>
                        @Html.EditorFor(model => model.ItemShortSpecifications, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ItemShortSpecifications, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                @Html.LabelFor(model => model.ItemSpecifications, htmlAttributes: new { @class = "control-label" })
                <div class="form-group">
                    @Html.EditorFor(model => model.ItemSpecifications, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "resize:none", rows = 4 } })
                    @Html.ValidationMessageFor(model => model.ItemSpecifications, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    <div class="form-group mb-3">
                        <input type="file" id="Avatar" name="upload" />
                    </div>
                    @Html.ValidationMessageFor(model => model.ItemImage, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-id-card"></i></span>
                        </div>
                        @if (ViewBag.Action == "Edit" && Model.IsTangible == "No")
                        {
                            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "text-align:right;", type = "number", step = "0.01", min = "0.00", disabled = "disabled" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "text-align:right;", type = "number", step = "0.01", min = "0.00" } })
                        }
                    </div>
                    @Html.ValidationMessageFor(model => model.ItemShortSpecifications, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.PackagingUOMReference, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-bookmark"></i></span>
                        </div>
                        @if (ViewBag.Action == "Edit" && Model.IsTangible == "No")
                        {
                            @Html.DropDownList("PackagingUOMReference", null, htmlAttributes: new { @class = "form-control form-control-sm select2", disabled = "disabled" })
                        }
                        else
                        {
                            @Html.DropDownList("PackagingUOMReference", null, htmlAttributes: new { @class = "form-control form-control-sm select2" })
                        }
                    </div>
                    @Html.ValidationMessageFor(model => model.PackagingUOMReference, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.QuantityPerPackage, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-hashtag"></i></span>
                        </div>
                        @if (ViewBag.Action == "Edit" && Model.IsTangible == "No")
                        {
                            @Html.EditorFor(model => model.QuantityPerPackage, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.QuantityPerPackage, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        }
                    </div>
                    @Html.ValidationMessageFor(model => model.QuantityPerPackage, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.IndividualUOMReference, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-bookmark"></i></span>
                        </div>
                        @if (ViewBag.Action == "Edit" && Model.IsTangible == "No")
                        {
                            @Html.DropDownList("IndividualUOMReference", null, htmlAttributes: new { @class = "form-control select2", disabled = "disabled" })
                        }
                        else
                        {
                            @Html.DropDownList("IndividualUOMReference", null, htmlAttributes: new { @class = "form-control select2" })
                        }
                    </div>
                    @Html.ValidationMessageFor(model => model.IndividualUOMReference, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.MinimumIssuanceQty, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-question"></i></span>
                        </div>
                        @if (ViewBag.Action == "Edit" && Model.IsTangible == "No")
                        {
                            @Html.EditorFor(model => model.MinimumIssuanceQty, new { htmlAttributes = new { @class = "form-control form-control-sm", disabled = "disabled" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.MinimumIssuanceQty, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        }
                    </div>
                    @Html.ValidationMessageFor(model => model.MinimumIssuanceQty, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.AllowedUsers, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownList("AllowedUsers", null, htmlAttributes: new { @class = "form-control form-control-sm select2 select2bs4", multiple = "multiple" })
                    @Html.ValidationMessageFor(model => model.AllowedUsers, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function GetItemTypeDetails() {
        var Id = $('#ItemType').val();
        var url = '@Url.Action("GetItemTypeDetails", "Items")';
        $.ajax({
            url: url,
            data: { ItemTypeCode: Id },
            type: "GET",
            success: function (data) {
                $('#InventoryType').val(data.InventoryTypeName);
                $('#AccountClass').val(data.AccountClass);
                $('#ResponsibilityCenter').val(data.ResponsibilityCenter).change();
                $('#IsTangible').val(data.IsTangible);
                if(data.IsTangible == "Yes")
                {
                    $("#ItemSpecifications").removeAttr("disabled", "disabled");
                    $("#Avatar").removeAttr("disabled", "disabled");
                    $("#UnitPrice").removeAttr("disabled", "disabled");
                    $("#PackagingUOMReference").removeAttr("disabled", "disabled");
                    $("#QuantityPerPackage").removeAttr("disabled", "disabled");
                    $("#IndividualUOMReference").removeAttr("disabled", "disabled");
                    $("#MinimumIssuanceQty").removeAttr("disabled", "disabled");
                }
                else
                {
                    $("#ItemSpecifications").attr("disabled", "disabled");
                    $("#Avatar").attr("disabled", "disabled");
                    $("#UnitPrice").attr("disabled", "disabled");
                    $("#PackagingUOMReference").attr("disabled", "disabled");
                    $("#QuantityPerPackage").attr("disabled", "disabled");
                    $("#IndividualUOMReference").attr("disabled", "disabled");
                    $("#MinimumIssuanceQty").attr("disabled", "disabled");
                }
            }
        });
    };
</script>