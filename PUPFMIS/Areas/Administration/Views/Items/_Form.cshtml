@model PUPFMIS.Models.ItemVM

<div class="form-horizontal">
    <div class="row">
        <div class="col-sm-12">
            <div class="bg-info">
                <h5 class="p-2">Item Details</h5>
            </div>
        </div>
    </div>
    <br />
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @if (ViewBag.Description == "Edit Record")
    {
        @Html.HiddenFor(model => model.ID)
    }
    <div class="form-horizontal">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Article, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-id-badge"></i></span>
                        </div>
                        @Html.DropDownList("Article", null, "Please Select Article", htmlAttributes: new { @class = "form-control form-control-sm select2", placeholder = Html.DisplayNameFor(model => model.Article), onchange = "GetArticleDetails()", style = "font-size:9pt;" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Article, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Classification, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-asterisk"></i></span>
                        </div>
                        @Html.EditorFor(model => model.Classification, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = Html.DisplayNameFor(model => model.Classification), autocomplete = "off", style = "font-size:9pt;", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Classification, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.AccountClass, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-bookmark"></i></span>
                        </div>
                        @Html.EditorFor(model => model.AccountClass, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = Html.DisplayNameFor(d => d.AccountClass), disabled = "disabled", style = "font-size:9pt;" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.AccountClass, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ItemType, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-book"></i></span>
                        </div>
                        @Html.EditorFor(model => model.ItemType, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = Html.DisplayNameFor(d => d.ItemType), disabled = "disabled", style = "font-size:9pt;" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ItemType, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ResponsibilityCenter, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-building"></i></span>
                        </div>
                        @Html.EditorFor(model => model.ResponsibilityCenter, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = Html.DisplayNameFor(model => model.ResponsibilityCenter), autocomplete = "off", style = "font-size:9pt;", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ResponsibilityCenter, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseRequestOffice, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-file"></i></span>
                        </div>
                        @Html.EditorFor(model => model.PurchaseRequestOffice, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = Html.DisplayNameFor(model => model.PurchaseRequestOffice), autocomplete = "off", style = "font-size:9pt;", disabled = "disabled" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.PurchaseRequestOffice, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ItemShortSpecifications, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-id-card"></i></span>
                        </div>
                        @Html.EditorFor(model => model.ItemShortSpecifications, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = Html.DisplayNameFor(model => model.ItemShortSpecifications), autocomplete = "off", style = "font-size:9pt; text-transform:uppercase;" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ItemShortSpecifications, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.IsSpecsUserDefined, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        <div class="col-sm-2">
                            <div class="custom-control custom-radio">
                                @Html.RadioButtonFor(modelItem => Model.IsSpecsUserDefined, "false", htmlAttributes: new { @class = "custom-control-input", id = "NO", @checked = "checked" })
                                @Html.Label("No", htmlAttributes: new { @class = "custom-control-label", @for = "NO", style = "font-size:10pt" })
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="custom-control custom-radio">
                                @Html.RadioButtonFor(modelItem => Model.IsSpecsUserDefined, "true", htmlAttributes: new { @class = "custom-control-input", id = "YES" })
                                @Html.Label("Yes", htmlAttributes: new { @class = "custom-control-label", @for = "YES", style = "font-size:10pt" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                @Html.LabelFor(model => model.ItemSpecifications, htmlAttributes: new { @class = "control-label" })
                <div class="form-group">
                    @Html.EditorFor(model => model.ItemSpecifications, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "resize:none", rows = 4 } })
                    @Html.ValidationMessageFor(model => model.ItemSpecifications, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ItemImage, htmlAttributes: new { @class = "control-label" })
                    <div class="form-group mb-3">
                        <input type="file" id="Avatar" name="upload" />
                    </div>
                    @Html.ValidationMessageFor(model => model.ItemImage, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-bookmark"></i></span>
                        </div>
                        @Html.DropDownList("Category", null, htmlAttributes: new { @class = "form-control form-control-sm select2" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProcurementSource, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-building"></i></span>
                        </div>
                        @Html.EnumDropDownListFor(model => model.ProcurementSource, htmlAttributes: new { @class = "form-control form-control-sm", style = "font-size:9pt;" })
                    </div>
                    @Html.ValidationMessageFor(model => model.ProcurementSource, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-id-card"></i></span>
                        </div>
                        @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "text-align:right;", type = "number", step = "0.01", min = "0.00", Value = Model == null ? "0.00" : Model.UnitPrice.ToString(), autocomplete = "off" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.ItemShortSpecifications, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.PackagingUOMReference, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-bookmark"></i></span>
                        </div>
                        @Html.DropDownList("PackagingUOMReference", null, htmlAttributes: new { @class = "form-control form-control-sm select2" })
                    </div>
                    @Html.ValidationMessageFor(model => model.PackagingUOMReference, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.QuantityPerPackage, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-hashtag"></i></span>
                        </div>
                        @Html.EditorFor(model => model.QuantityPerPackage, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.QuantityPerPackage, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.IndividualUOMReference, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-bookmark"></i></span>
                        </div>
                        @Html.DropDownList("IndividualUOMReference", null, htmlAttributes: new { @class = "form-control form-control-sm select2" })
                    </div>
                    @Html.ValidationMessageFor(model => model.IndividualUOMReference, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.MinimumIssuanceQty, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-question"></i></span>
                        </div>
                        @Html.EditorFor(model => model.MinimumIssuanceQty, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.MinimumIssuanceQty, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.AllowedUsers, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownList("AllowedUsers", null, htmlAttributes: new { @class = "form-control form-control-sm select2 select2bs4", multiple = "multiple" })
                    @Html.ValidationMessageFor(model => model.AllowedUsers, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $('document').ready(function () {
        if($("#NO").attr("checked", "checked"))
        {
            $("#ItemSpecifications").prop("disabled", false);
        }
        if($("#ProcurementSource").val() == 1)
        {
            $("#UnitPrice").prop("disabled", true);
            $("#UnitPrice").val("");
        }
    });
    $('#NO').click(function () {
        $("#ItemSpecifications").prop("disabled", false);
    });
    $('#YES').click(function () {
        $("#ItemSpecifications").prop("disabled", true);
    });
    function GetArticleDetails() {
        var ID = $('#Article').val();
        var url = '@Url.Action("get-article-details", "Items", new { ArticleID = "xxxx" })';
        url = url.replace("xxxx", ID);
        $.ajax({
            url: url,
            type: "GET",
            success: function (data) {
                $('#ItemType').val(data.FKItemTypeReference.ItemType);
                $('#AccountClass').val(data.UACSObjectClass);
                $('#ResponsibilityCenter').val(data.FKItemTypeReference.ResponsibilityCenter);
                $('#PurchaseRequestOffice').val(data.FKItemTypeReference.PurchaseRequestCenter);
                $('#Classification').val(data.FKItemTypeReference.FKItemClassificationReference.Classification);
            }
        });
    };
    $('#ProcurementSource').on('change', function () {
        if(this.value == 0)
        {
            $("#UnitPrice").prop("disabled", false);
            $("#UnitPrice").val("0.00");
        }
        else
        {
            $("#UnitPrice").prop("disabled", true);
            $("#UnitPrice").val("");
        }
    });
</script>