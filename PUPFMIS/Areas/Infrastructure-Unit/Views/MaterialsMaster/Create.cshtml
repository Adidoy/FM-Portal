@model PUPFMIS.Models.InfrastructureMaterials

<div class="modal-header">
    <h4 class="modal-title">Add New Material/Labor</h4>
    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>

@using (Ajax.BeginForm("create", "MaterialsMaster", new AjaxOptions() { HttpMethod = "POST", UpdateTargetId = "modal-container", OnSuccess = "CloseModal" }, htmlAttributes: new { id = "addUnit" }))
{
    <div class="modal-body" id="form-body">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.WorkClassificationReference, htmlAttributes: new { @class = "control-label" })
        @Html.DropDownList("WorkClassificationReference", null, htmlAttributes: new { @class = "form-control form-control-sm select2", style = "width:100%", onchange = "GetWorkRequirements()" })
        @Html.ValidationMessageFor(model => model.WorkClassificationReference, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.WorkRequirementReference, htmlAttributes: new { @class = "control-label" })
        @Html.DropDownList("WorkRequirementReference", null, "--- SELECT WORK REQUIREMENT ---", htmlAttributes: new { @class = "form-control form-control-sm select2", style = "width:100%" })
        @Html.ValidationMessageFor(model => model.WorkRequirementReference, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ItemName, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.ItemName, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "font-size:100%; text-transform:uppercase;", @autocomplete = "off", placeholder = Html.DisplayNameFor(d => d.ItemName) } })
        @Html.ValidationMessageFor(model => model.ItemName, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ItemSpecifications, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.ItemSpecifications, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "font-size:100%; resize:none; font-size: 100%", rows = 4, @autocomplete = "off", placeholder = Html.DisplayNameFor(d => d.ItemSpecifications) } })
        @Html.ValidationMessageFor(model => model.ItemSpecifications, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.UOMReference, htmlAttributes: new { @class = "control-label" })
        @Html.DropDownList("UOMReference", null, htmlAttributes: new { @class = "form-control form-control-sm select2", style = "width:100%" })
        @Html.ValidationMessageFor(model => model.UOMReference, "", new { @class = "text-danger" })
    </div>
</div>
}
<div class="modal-footer">
    <div class="form-group">
        <button type="button" class="btn btn-primary" id="save-btn"><i class="fa fa-save"></i>&nbsp; Save changes</button>
        <button type="button" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-times-circle"></i>&nbsp; Close</button>
    </div>
</div>


<script type="text/javascript">
    $("#save-btn").on('click', function (e) {
        e.preventDefault();
        swal.fire({
            title: "Save record?",
            text: "You are about to save this record, continue?",
            icon: "question",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                $("#addUnit").submit();
            }
        })
    });
    function CloseModal(data) {
        if (data.result === true) {
            $('#modal-default').modal('hide');
            if (data.result == true) {
                swal.fire({
                    title: "Record Saved!",
                    text: "Record is successfully saved.",
                    icon: "success"
                }).then((result) => {
                    if (result.value) {
                        window.location.href = "@Url.Action("list", "MaterialsMaster", new { Area = "infrastructure-unit" })";
                    }
                })
            }
            else {
                swal.fire({
                    title: "Record Not Saved!",
                    text: "Saving record failed.",
                    icon: "error"
                })
            }
        }
    };

    function GetWorkRequirements() {
        var workClassID = $('#WorkClassificationReference').val();
        var url = '@Url.Action("get-work-requirements", "MaterialsMaster", new { Area = "infrastructure-unit" })';
        $.ajax({
            url: url,
            data: { WorkClassID: workClassID },
            type: "GET",
            success: function (data) {
                var s = '<option value="-1">--- SELECT WORK REQUIREMENT ---</option>';
                for (var i = 0; i < data.length; i++) {
                    s += '<option value="' + data[i].ID + '">' + data[i].Requirement + '</option>';
                }
                $("#WorkRequirementReference").html(s);
            }
        });
    }
    $('.select2').select2();
</script>