@model PUPFMIS.Models.UsersVM


@using (Ajax.BeginForm("register", "Users", new AjaxOptions() { HttpMethod = "POST", UpdateTargetId = "modal-container", OnSuccess = "CreateResult" }, htmlAttributes: new { id = "addUser", Area = "" }))
{
    <div class="modal-body" id="form-body">
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.Label("Department", htmlAttributes: new { @class = "control-label" })
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fa fa-building"></i></span>
                </div>
                @Html.DropDownList("DepartmentCode", null, htmlAttributes: new { @class = "form-control form-control-sm select2", onchange = "GetEmployees()" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Employee Name", htmlAttributes: new { @class = "control-label" })
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fa fa-user"></i></span>
                </div>
                @Html.DropDownList("EmpCode", null, htmlAttributes: new { @class = "form-control form-control-sm select2", onchange = "GetEmployeeDetails()" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label" })
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fa fa-book"></i></span>
                </div>
                @Html.HiddenFor(model => model.Designation)
                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { id = "DesignationDisplay", @class = "form-control form-control-sm", style = "font-size:100%;", disabled = "disabled" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fa fa-at"></i></span>
                </div>
                @Html.HiddenFor(model => model.Email)
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { id = "EmailDisplay", @class = "form-control form-control-sm", style = "font-size:100%;", disabled = "disabled" } })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Focus Unit", htmlAttributes: new { @class = "control-label" })
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fa fa-building"></i></span>
                </div>
                @Html.DropDownList("UnitCode", null, htmlAttributes: new { @class = "form-control form-control-sm select2" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("System Role", htmlAttributes: new { @class = "control-label" })
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fa fa-user-cog"></i></span>
                </div>
                @Html.DropDownList("UserRole", null, htmlAttributes: new { @class = "form-control form-control-sm select2", style = "font-size:100%;" })
            </div>
        </div>
    </div>
}

<div class="modal-footer">
    <div class="form-group">
        <button type="button" class="btn btn-primary" id="save-btn"><i class="fa fa-save"></i>&nbsp; Save changes</button>
        <button type="button" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-times-circle"></i>&nbsp; Close</button>
    </div>
</div>

<script type="text/javascript">
    $("#save-btn").on('click', function (e) {
        e.preventDefault();
        swal.fire({
            title: "Save record?",
            text: "You are about to save this record, continue?",
            icon: "question",
            showCancelButton: true,
        }).then((result) => {
            if (result.value) {
                $("#addUser").submit();
            }
        })
    });
    function CreateResult(data) {
        if (data.result == true) {
            swal.fire({
                title: "Record Saved!",
                text: "User Account is successfully saved!",
                icon: "success"
            }).then((result) => {
                if (result.value) {
                    window.location.href = "@Url.Action("users-management", "Users", new { Area = "" })";
                }
            })
        }
        else {
            swal.fire({
                title: "Record Not Saved!",
                text: "Saving record failed.",
                icon: "error"
            })
        }
    };
    function GetEmployees() {
        var deptCode = $('#DepartmentCode').val();
        var urlUsers = '@Url.Action("get-employees", "Users")';
        var urlUnits = '@Url.Action("get-units", "Users")';
        $.ajax({
            url: urlUsers,
            data: { DepartmentCode: deptCode },
            type: "GET",
            success: function (data) {
                var s = '<option value="-1">Please Select an Employee</option>';
                for (var i = 0; i < data.length; i++) {
                    s += '<option value="' + data[i].EmployeeCode + '">' + data[i].EmployeeName + '</option>';
                }
                $("#EmpCode").html(s);
            }
        });
        $.ajax({
            url: urlUnits,
            data: { DepartmentCode: deptCode },
            type: "GET",
            success: function (data) {
                var s = '<option value="-1">Please Select a Unit</option>';
                for (var i = 0; i < data.length; i++) {
                    s += '<option value="' + data[i].DepartmentCode + '">' + data[i].Department + '</option>';
                }
                $("#UnitCode").html(s);
            }
        });
    };
    function GetEmployeeDetails() {
        var empCode = $('#EmpCode').val();
        var url = '@Url.Action("get-employee-details", "Users")';
        $.ajax({
            url: url,
            data: { EmpCode: empCode },
            type: "GET",
            success: function (data) {
                var email = data.Data.Email;
                var designation = data.Data.Designation
                $('#Email').val(email);
                $('#Designation').val(designation);
                $('#EmailDisplay').val(email);
                $('#DesignationDisplay').val(designation);
            }
        });
    };
    $(function () {
        //Initialize Select2 Elements
        $('.select2').select2();
    })
</script>